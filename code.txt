File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\migrations\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\admin.py
Contents:
from django.contrib import admin

# Register your models here.
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\apps.py
Contents:
from django.apps import AppConfig


class AuthenticationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'Authentication'
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\models.py
Contents:
from django.db import models

class LoginToken(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    role = models.CharField(
        choices=[("customer", "Customer"), ("airline", "Airline"), ("admin", "Admin")],
        max_length=10,
    )

    def __str__(self):
        return f"{self.name} - {self.role}"
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\tests.py
Contents:
from django.test import TestCase

# Create your tests here.
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\views.py
Contents:
from django.shortcuts import render

# Create your views here.
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\administrator_facade.py
Contents:

from .facade_base import FacadeBase
from models import Customers, Administrators, Airline_Companies

class AdministratorFacade(FacadeBase):
    def __init__(self, user):
        super().__init__()
        self.user = user

    def get_all_customers(self):
        return self.DAL.get_all(Customers)

    def add_airline(self, airline):
        return self.DAL.add(Airline_Companies, **airline)

    def add_customer(self, customer):
        return self.DAL.add(Customers, **customer)

    def add_administrator(self, administrator):
        return self.DAL.add(Administrators, **administrator)

    def remove_airline(self, airline):
        return self.DAL.remove(airline)

    def remove_customer(self, customer):
        return self.DAL.remove(customer)

    def remove_administrator(self, administrator):
        return self.DAL.remove(administrator)
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\airline_facade.py
Contents:

from .facade_base import FacadeBase
from models import Airline_Companies, Flights

class AirlineFacade(FacadeBase):
    def __init__(self, user):
        super().__init__()
        self.user = user

    def get_my_flights(self):
        return self.DAL.get_flights_by_airline_id(self.user.airline_company.iata_code)

    def update_airline(self, airline):
        return self.DAL.update(self.user.airline_company, **airline)

    def add_flight(self, flight):
        return self.DAL.add(Flights, **flight)

    def update_flight(self, flight):
        return self.DAL.update(flight)

    def remove_flight(self, flight):
        return self.DAL.remove(flight)
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\anonymous_facade.py
Contents:

from .customer_facade import CustomerFacade
from .airline_facade import AirlineFacade
from .administrator_facade import AdministratorFacade
from .facade_base import FacadeBase
from models import Customers, Users
from Authentication.models import LoginToken

class AnonymousFacade(FacadeBase):
    def login(self, username, password):
        user = self.DAL.get_user_by_username(username)
        if user is not None and user.check_password(password):
            # Create the LoginToken object with user information
            login_token = LoginToken(name=user.username, role='customer')
            return CustomerFacade(login_token), user.id
        elif user.user_role.role_name == 'Airline':
                # Create the LoginToken object with user information
                login_token = LoginToken(name=user.username, role='airline')
                return AirlineFacade(login_token), user.id
        elif user.user_role.role_name == 'Administrator':
                # Create the LoginToken object with user information
                login_token = LoginToken(name=user.username, role='administrator')
                return AdministratorFacade(login_token), user.id
        return None

    def add_customer(self, customer):
        user = Users.objects.create_user(username=customer['user']['username'], password=customer['user']['password'])
        customer['user_id'] = user.id
        return self.DAL.add(Customers, **customer)


-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\customer_facade.py
Contents:

from .facade_base import FacadeBase
from models import Customers, Tickets

class CustomerFacade(FacadeBase):
    def __init__(self, user):
        super().__init__()
        self.user = user

    def update_customer(self, customer):
        return self.DAL.update(self.user.customer, **customer)

    def add_ticket(self, ticket):
        return self.DAL.add(Tickets, **ticket)

    def remove_ticket(self, ticket):
        return self.DAL.remove(ticket)

    def get_my_tickets(self):
        return self.DAL.get_tickets_by_customer(self.user.customer.id)
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\facade_base.py
Contents:


from ..models import DAL, Users, Airline_Companies, Flights, Countries
from django.core.exceptions import ValidationError
from django.contrib.auth.hashers import make_password

class FacadeBase:
    def __init__(self):
        self.DAL = DAL()
    
    def get_all_flights(self):
        return self.DAL.get_all(Flights)

    def get_flight_by_id(self, id):
        return self.DAL.get_by_id(Flights, id)

    def get_flights_by_parameters(self, origin_country_id, destination_country_id, date):
        return self.DAL.get_flights_by_parameters(origin_country_id, destination_country_id, date)

    def get_all_airlines(self):
        return self.DAL.get_all(Airline_Companies)

    def get_airline_by_id(self, id):
        return self.DAL.get_by_id(Airline_Companies, id)

    def get_all_countries(self):
        return self.DAL.get_all(Countries)

    def get_country_by_id(self, id):
        return self.DAL.get_by_id(Countries, id)

    def create_new_user(self, user):
        id = user.get("id")
        username = user.get("username")
        email = user.get("email")
        password = user.get("password")
        user_role = user.get("user_role")
        image = user.get("image")
        
        if Users.objects.filter(username=username).exists():
            raise ValidationError("Username already exists")
            
        if Users.objects.filter(email=email).exists():
            raise ValidationError("Email already exists")
        
        
        password = make_password(password)  # hash the password before saving
        user_data = {'id':id ,'username': username, 'email': email, 'password': password, 'user_role': user_role, 'image': image}
        
        created_user = self.DAL.add(Users, **user_data)
        print("Created User: ", created_user)
        return created_user

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\utils\amadeus.py
Contents:
import requests
import os
import json


def get_token():
    url = "https://api.amadeus.com/v1/security/oauth2/token"
    # payload = 'grant_type=client_credentials&client_id=7IgQrqy0G2E0lcouQ7B3Dlo3bR43pUKi&client_secret=ZeW3niQftvla34pB' this is the old not so working token that got hacked 
    payload = 'grant_type=client_credentials&client_id=OEAF6GngPrGt0kXZklcxsviCcYAWo5TB&client_secret=9VF9tuFtnHeVbjkC' # this is the new token that works
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    response = requests.request("POST", url, headers=headers, data=payload)
    token = response.json()['access_token']
    os.environ["amadeus-api-token"] = token
    return token


def get_ticket_data(data):
    get_token()
    url = "https://api.amadeus.com/v2/shopping/flight-offers"

    payload = json.dumps(data)
    headers = {
        'Authorization': f'Bearer {os.environ["amadeus-api-token"]}',
        'Content-Type': 'application/json'
    }

    response = requests.request("POST", url, headers=headers, data=payload)

    return response.json()
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\admin.py
Contents:
from django.contrib import admin
from .models import Flights, Countries, Tickets, Airline_Companies, Customers, Users, User_Roles, Administrators , Airport
from .models import Airline_Companies
import requests
from django.core.files import File
from io import BytesIO


class AirlineCompaniesAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        if not obj.logo:  # If no logo file is uploaded
            url = f'https://content.r9cdn.net/rimg/provider-logos/airlines/v/{obj.iata_code}.png?crop=false&width=100&height=100'
            response = requests.get(url)
            if response.status_code == 200:
                # Save the logo to the ImageField
                img_temp = BytesIO()
                img_temp.write(response.content)
                img_temp.seek(0)
                obj.logo.save(f'{obj.iata_code}.png', File(img_temp), save=False)
        
        super().save_model(request, obj, form, change)


admin.site.register(Airline_Companies, AirlineCompaniesAdmin)
admin.site.register(Flights)
admin.site.register(Countries)
admin.site.register(Tickets)
admin.site.register(Customers)
admin.site.register(Users)
admin.site.register(User_Roles)
admin.site.register(Administrators)
admin.site.register(Airport)

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\apps.py
Contents:
from django.apps import AppConfig


class BingoConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'Bingo'
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\Countries.py
Contents:
import pandas as pd
from Bingo.models import Countries  # replace with your actual models module

df = pd.read_csv('countries.csv')

for index, row in df.iterrows():
    country = Countries(name=row['Country name'], country_code=row['Country Code'])
    country.save()
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\forms.py
Contents:
from django import forms
from .models import Users
from django.contrib.auth.forms import AuthenticationForm


class UsersForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput())

    class Meta:
        model = Users
        fields = ['id', 'username', 'password', 'email', 'user_role', 'image']

    def clean(self):
        cleaned_data = super().clean()
        password = cleaned_data.get("password")


        return cleaned_data
    



-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\models.py
Contents:
from datetime import timedelta
from django.db import models
import requests
from django.core import validators
from io import BytesIO
from django.core.files.base import ContentFile
import urllib
from django.core.files import File
import logging
from django.core.validators import MinValueValidator
import string , random
from django.db import models
from django.utils import timezone
from django.db.models import Q
from django.utils import timezone
from datetime import timedelta
from django.db import models
from django.core.validators import MinValueValidator
import string
import random





class Flights(models.Model):
    id = models.BigAutoField(primary_key=True)
    airline_company_id = models.ForeignKey('Airline_Companies', to_field='iata_code', on_delete=models.CASCADE)
    origin_country_id = models.ForeignKey('Countries', on_delete=models.CASCADE, related_name='origin_flights')
    destination_country_id = models.ForeignKey('Countries', on_delete=models.CASCADE, related_name='destination_flights')
    departure_time = models.DateTimeField(null=False)
    landing_time = models.DateTimeField(null=False)
    remaining_tickets = models.IntegerField(null=False, validators=[MinValueValidator(0)])

    def __str__(self):
        return f'Flight {self.id}'
    
    class Meta:
        verbose_name_plural = "Flights"





# Countries model represents different countries
class Countries(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=255, unique=True)
    country_code = models.CharField(max_length=2, unique=True)

    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name_plural = "Countries"

        
    
        


# Tickets model represents individual flight tickets
class Tickets(models.Model):
    id = models.BigAutoField(primary_key=True)
    flight_id = models.ForeignKey(Flights, on_delete=models.CASCADE)
    customer_id = models.ForeignKey('Customers', on_delete=models.CASCADE)

    def __str__(self):
        return f'Ticket {self.id}'
    
    class Meta:
        verbose_name_plural = "Tickets"
    
logger = logging.getLogger(__name__)


class Airline_Companies(models.Model):
    iata_code = models.CharField(max_length=2, primary_key=True)
    name = models.CharField(max_length=255, unique=True)
    country_id = models.ForeignKey(Countries, on_delete=models.CASCADE)
    user_id = models.ForeignKey('Users', on_delete=models.CASCADE, unique=True)
    logo = models.ImageField(upload_to='airline_logos/', default='/airline_logos/airplanelogo.png', null=True, blank=True)

    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name_plural = "Airline Companies"


    def save(self, *args, **kwargs):
        logger.info(f"Attempting to save Airline_Companies instance with iata_code: {self.iata_code}")

        if self.iata_code and not self.logo:
            # Download the logo from the URL
            url = f'https://content.r9cdn.net/rimg/provider-logos/airlines/v/{self.iata_code}.png?crop=false&width=100&height=100'
            try:
                response = urllib.request.urlopen(url)
                if response.status == 200:
                    # Save the logo to the ImageField
                    filename = f'{self.iata_code}.png'
                    self.logo.save(filename, File(response), save=False)
                    logger.info(f"Downloaded and saved logo for {self.iata_code} from {url}")
                else:
                    self.logo = 'airplanelogo.png'
                    logger.warning(f"Received status {response.status} when trying to download logo from {url}")
            except Exception as e:
                self.logo = 'airplanelogo.png'
                logger.error(f"Error when trying to download logo from {url}: {e}")

        # If logo wasn't specified and couldn't be downloaded, use the default logo
        if not self.logo:
            self.logo = 'airplanelogo.png'
        
        super().save(*args, **kwargs)
        logger.info(f"Saved Airline_Companies instance with iata_code: {self.iata_code}")

  
    @property
    def image_url(self):
        if self.logo:
            return self.logo.url
        else:
            return '/media/airplanelogo.png" style="width: 100px; height: 100px;"'

        

# Customers model represents individual customers
class Customers(models.Model):
    id = models.BigAutoField(primary_key=True)
    first_name = models.TextField(null=False)
    last_name = models.TextField(null=False)
    address = models.TextField(null=False)
    phone_no = models.CharField(max_length=15, unique=True, null=False)
    credit_card_no = models.CharField(max_length=50, unique=True, null=False)
    user_id = models.ForeignKey('Users', on_delete=models.CASCADE, unique=True)

    def __str__(self):
        return f'{self.first_name} {self.last_name}'
    
    class Meta:
        verbose_name_plural = "Customers"
    
    # Method to retrieve the image URL of the customer's profile picture
    @property
    def image_url(self):
        try:
            url = self.user_id.image.url
        except:
            url = ''
        return url
    
    
    # Method to retrieve a masked version of the customer's credit card number leaving only the last 4 digits
    @property
    def masked_credit_card(self):
        return '*' * (len(self.credit_card_no) - 4) + self.credit_card_no[-4:]
    


def validate_nine_digits(value):
    if len(str(value)) != 9:
        raise validators.ValidationError("ID must be exactly 9 digits long.")


# Users model represents individual user accounts
class Users(models.Model):
    id = models.CharField(max_length=9, primary_key=True, validators=[validate_nine_digits])
    username = models.CharField(max_length=255, unique=True, null=False)
    password = models.CharField(max_length=255, null=False)
    email = models.EmailField(max_length=255, unique=True, null=False)
    user_role = models.ForeignKey('User_Roles', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='users/', default='/users/defaultuser.png', null=True)

    def __str__(self):
        return self.username
    
    class Meta:
        verbose_name_plural = "Users"


    # Method to retrieve the image URL of the user's profile picture if none exists returns default image
    @property
    def image_url(self):
        try:
            url = self.image.url
        except:
            url = ''
        return url
    

# User_Roles model represents different user roles ()
class User_Roles(models.Model):
    id = models.AutoField(primary_key=True)
    role_name = models.CharField(max_length=255, unique=True, null=False)

    def __str__(self):
        return self.role_name
    
    class Meta:
        verbose_name_plural = "User Roles"
    

# Administrators model represents different administrators
class Administrators(models.Model):
    id = models.BigAutoField(primary_key=True)
    first_name = models.TextField(null=False)
    last_name = models.TextField(null=False)
    user_id = models.ForeignKey('Users', on_delete=models.CASCADE, unique=True)

    def __str__(self):
        return f'{self.first_name} {self.last_name}'
    
    class Meta:
        verbose_name_plural = "Administrators"



class Airport(models.Model):
    name = models.CharField(max_length=255)
    iata_code = models.CharField(max_length=3)

    def __str__(self):
        return self.name
    



class DAL:
    def get_by_id(self, model, id):
        try:
            return model.objects.get(id=id)
        except model.DoesNotExist:
            return None

    def get_all(self, model):
        try:
            return model.objects.all()
        except Exception as e:
            return None

    def add(self, model, **kwargs):
        try:
            instance = model.objects.create(**kwargs)
            if instance:
                logger.info(f"Successfully created {model.__name__} instance: {instance}")
                return instance
            else:
                logger.error(f"Failed to create {model.__name__} instance with kwargs: {kwargs}")
                return None
        except Exception as e:
            logger.error(f"Error creating {model.__name__} instance with kwargs: {kwargs}. Error: {str(e)}")
            return None


    def update(self, instance, **kwargs):
        try:
            for attr, value in kwargs.items():
                setattr(instance, attr, value)
            instance.save()
            return instance
        except Exception as e:
            return None

    def add_all(self, model, list_of_dicts):
        try:
            return model.objects.bulk_create([model(**kwargs) for kwargs in list_of_dicts])
        except Exception as e:
            return None

    def remove(self, instance):
        try:
            instance.delete()
        except Exception as e:
            return None

    # Additional methods
    def getAirlinesByCountry(self, country_id):
        try:
            return Airline_Companies.objects.filter(country_id=country_id)
        except Exception as e:
            return None

    def getFlightsByOriginCountryId(self, country_id):
        try:
            return Flights.objects.filter(origin_id=country_id)
        except Exception as e:
            return None

    def getFlightsByDestinationCountryId(self, country_id):
        try:
            return Flights.objects.filter(destination_id=country_id)
        except Exception as e:
            return None

    def getFlightsByDepartureDate(self, date):
        try:
            return Flights.objects.filter(departure_date=date)
        except Exception as e:
            return None

    def getFlightsByLandingDate(self, date):
        try:
            return Flights.objects.filter(landing_date=date)
        except Exception as e:
            return None

    def getFlightsByCustomer(self, customer):
        try:
            return Flights.objects.filter(customer=customer)
        except Exception as e:
            return None
    
    def get_airline_by_username(self, _username):
        try:
            return Airline_Companies.objects.get(user__username=_username)
        except Airline_Companies.DoesNotExist:
            return None

    def get_customer_by_username(self, _username):
        try:
            return Customers.objects.get(user__username=_username)
        except Customers.DoesNotExist:
            return None

    def get_user_by_username(self, _username):
        try:
            return Users.objects.get(username=_username)
        except Users.DoesNotExist:
            return None

    def get_flights_by_parameters(self, _origin_country_id, _destination_country_id, _date):
        try:
            return Flights.objects.filter(
                origin_id=_origin_country_id,
                destination_id=_destination_country_id,
                departure_date=_date
            )
        except Exception as e:
            return None

    def get_flights_by_airline_id(self, _airline_id):
        try:
            return Flights.objects.filter(airline_company_id=_airline_id)
        except Exception as e:
            return None

    def get_arrival_flights(self, _country_id):
        try:
            next_12_hours = timezone.now() + timedelta(hours=12)
            return Flights.objects.filter(
                destination_id=_country_id,
                landing_date__lte=next_12_hours
            )
        except Exception as e:
            return None


    def get_departure_flights(self, _country_id):
        try:
            next_12_hours = timezone.now() + timedelta(hours=12)
            return Flights.objects.filter(
                origin_id=_country_id,
                departure_date__lte=next_12_hours
            )
        except Exception as e:
            return None

    def get_tickets_by_customer(self, _customer_id):
        try:
            return Tickets.objects.filter(customer_id=_customer_id)
        except Exception as e:
            return None

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\urls.py
Contents:
from . import views
from django.contrib import admin
from django.urls import path
from .views import flight_search
from django.conf.urls.static import static
from django.conf import settings
from django.contrib.auth.views import LoginView





urlpatterns = [
    path('', views.home, name='home'),
    path('flight_search', views.flight_search, name='flight_search'),
    path('search-flight/', views.search_form, name='search_form'),
    path('search-results/', views.handle_search_form_submission, name='search_results'),
    path('autocomplete/', views.autocomplete, name='autocomplete'),
    path('register/', views.create_new_user, name='create_new_user'),
    


]

urlpatterns += static(settings.MEDIA_URL ,document_root =settings.MEDIA_ROOT)
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\views.py
Contents:


from django import forms
from django.http import JsonResponse, HttpResponseBadRequest, HttpResponse
from django.shortcuts import render ,redirect
from .utils.amadeus import get_ticket_data
from .models import Airport
import json
import datetime
from django.views.decorators.csrf import csrf_exempt
from django.db.models import Q
from django.core.exceptions import ValidationError
from django.forms.models import model_to_dict
import traceback
import logging
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm , UserCreationForm 
from .facades.facade_base import FacadeBase
from django.core.exceptions import ValidationError
from .forms import UsersForm 
from django.http import HttpResponseRedirect
from django.urls import reverse






# logger 
logger = logging.getLogger(__name__)



def create_new_user(request):
    form = UsersForm(request.POST, request.FILES)
    if request.method == "POST":
        if form.is_valid():
            user = {
                "id": form.cleaned_data.get("id"),
                "username": form.cleaned_data.get("username"),
                "email": form.cleaned_data.get("email"),
                "password": form.cleaned_data.get("password"),
                "user_role": form.cleaned_data.get("user_role"),
                "image": form.cleaned_data.get("image"),
            }

            logger.info(f"Form cleaned data: {form.cleaned_data}")


            try:
                facade = FacadeBase()
                facade.create_new_user(user)
                return HttpResponseRedirect(reverse('login'))
            except ValidationError as e:
                form.add_error(None, e)
            except Exception as e:  # catch any other exceptions
                form.add_error(None, "An unexpected error occurred. Please try again.")
                logger.error(f"Unexpected error creating user: {e}")
    else:
        form = UsersForm()
    return render(request, "register.html", {"form": form})





class SearchForm(forms.Form):
    numAdults = forms.IntegerField(min_value=1, initial=1 , label='Adults')
    numChildren = forms.IntegerField(min_value=0, initial=0 , label='Children')
    cabinType = forms.ChoiceField(choices=[('ECONOMY', 'Economy'), ('BUSINESS', 'Business'), ('FIRST', 'First')] , label='Cabin Type')
    currencyCode = forms.ChoiceField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP'), ('ILS', 'ILS')] , label='Currency')
    originLocationCode = forms.CharField(label='Flying From') 
    destinationLocationCode = forms.CharField(label='Flying To')
    departureDate1 = forms.DateField(label='Departure Date')
    flightType = forms.ChoiceField(choices=[('OneWay', 'One Way'), ('Return', 'Return Flight')] , label='Flight Type')
    departureDate2 = forms.DateField(required=False , label='Return Date')

    def clean(self):
        cleaned_data = super().clean()
        departureDate1 = cleaned_data.get('departureDate1')
        departureDate2 = cleaned_data.get('departureDate2')
        originLocationCode = cleaned_data.get('originLocationCode')
        destinationLocationCode = cleaned_data.get('destinationLocationCode')
        cabinType = cleaned_data.get('cabinType')
        numAdults = cleaned_data.get('numAdults')
        numChildren = cleaned_data.get('numChildren')

        # Check that departure date is not in the past
        if departureDate1 and departureDate1 < datetime.date.today():
            self.add_error('departureDate1', 'Departure date cannot be in the past.')

        # Check that return date is not before the departure date
        if departureDate2 and departureDate1 and departureDate2 < departureDate1:
            self.add_error('departureDate2', 'Return date cannot be before the departure date.')

        # Check that origin and destination are not the same
        if originLocationCode and destinationLocationCode and originLocationCode == destinationLocationCode:
            self.add_error('destinationLocationCode', 'You cannot select the same airport for departure and arrival.')

        # Check cabin type
        if cabinType not in ['ECONOMY', 'BUSINESS', 'FIRST']:
            self.add_error('cabinType', 'Invalid cabin type selected.')


        # Validate number of passengers
        if numAdults and numAdults > 9:
            self.add_error('numAdults', 'You cannot book for more than 9 adults at once.')
        if numChildren and numChildren > 9:
            self.add_error('numChildren', 'You cannot book for more than 9 children at once.')

        return cleaned_data

def get_iata_code(user_input):
    try:
        airport = Airport.objects.get(name__iexact=user_input)
        return airport.iata_code
    except Airport.DoesNotExist:
        try:
            airport = Airport.objects.get(iata_code__iexact=user_input)
            return airport.iata_code
        except Airport.DoesNotExist:
            return user_input

def autocomplete(request):
    q = request.GET.get('q', '')
    airports = Airport.objects.filter(Q(name__icontains=q) | Q(iata_code__icontains=q))
    results = [airport.name for airport in airports]
    return JsonResponse(results, safe=False)

#

def search_form(request):
    if request.method == "POST":
        return handle_search_form_submission(request)
        
    today = datetime.date.today()
    context = {
        'today': today.isoformat(),
        'form': SearchForm(),
    }
    return render(request, 'Bingo/search_form.html', context)


def handle_search_form_submission(request):
    form = SearchForm(request.POST)

    logger.info(f"Form data: {request.POST}")

    if form.is_valid():
    
        logger.info("Form is valid.")
        num_adults = form.cleaned_data['numAdults']
        num_children = form.cleaned_data['numChildren']
        cabin_type = form.cleaned_data['cabinType']
        currency_code = form.cleaned_data['currencyCode']
        origin_code = get_iata_code(form.cleaned_data['originLocationCode'])
        destination_code = get_iata_code(form.cleaned_data['destinationLocationCode'])
        departure_date1 = form.cleaned_data['departureDate1']
        flight_type = form.cleaned_data['flightType']
        departure_date2 = form.cleaned_data['departureDate2'] if flight_type == 'Return' else None
        
        travelers = [{"id": str(i+1), "travelerType": "ADULT"} for i in range(num_adults)]
        if num_children > 0:
            travelers.extend([{"id": str(i+1+num_adults), "travelerType": "CHILD"} for i in range(num_children)])

        data = {
            "currencyCode": currency_code,
            "originDestinations": [
                {
                    "id": "1",
                    "originLocationCode": origin_code,
                    "destinationLocationCode": destination_code,
                    "departureDateTimeRange": {
                        "date": departure_date1.isoformat()
                    }
                }
            ],
            "travelers": travelers,
            "sources": ["GDS"],
            "searchCriteria": {
                "flightFilters": {
                    "cabinRestrictions": [
                        {
                            "cabin": cabin_type,
                            "coverage": "MOST_SEGMENTS",
                            "originDestinationIds": [
                                "1"
                            ]
                        }
                    ]
                }
            }
        }

        if flight_type == 'Return':
            data['originDestinations'].append(
                {
                    "id": "2",
                    "originLocationCode": destination_code,
                    "destinationLocationCode": origin_code,
                    "departureDateTimeRange": {
                        "date": departure_date2.isoformat()
                    }
                }
            )
            
        try:
            response_data = get_ticket_data(data)
            modified_response = {
                "meta": {
                    "count": response_data["meta"]["count"]
                },
                "data": []
            }

            for flight_offer in response_data["data"]:
                modified_flight_offer = {
                    "type": flight_offer["type"],
                    "id": flight_offer["id"],
                    "lastTicketingDate": flight_offer["lastTicketingDate"],
                    "lastTicketingDateTime": flight_offer["lastTicketingDateTime"],
                    "numberOfBookableSeats": flight_offer["numberOfBookableSeats"],
                    "itineraries": [],
                    "price": {
                        "currency": currency_code,
                        "total": flight_offer["price"]["total"],
                        "grandTotal": flight_offer["price"]["grandTotal"]
                    },
                    "travelerPricings": []
                }

                for itinerary in flight_offer["itineraries"]:
                    modified_itinerary = {
                        "duration": itinerary["duration"],
                        "segments": []
                    }

                    for segment in itinerary["segments"]:
                        modified_segment = {
                            "departure": segment["departure"],
                            "arrival": segment["arrival"],
                            "carrierCode": segment["carrierCode"],
                            "number": segment["number"],
                            "duration": segment["duration"]
                        }

                        modified_itinerary["segments"].append(modified_segment)

                    modified_flight_offer["itineraries"].append(modified_itinerary)

                for traveler_pricing in flight_offer["travelerPricings"]:
                    modified_traveler_pricing = {
                        "travelerId": traveler_pricing["travelerId"],
                        "fareOption": traveler_pricing["fareOption"],
                        "travelerType": traveler_pricing["travelerType"],
                        "price": {
                            "currency": currency_code,
                            "total": traveler_pricing["price"]["total"]
                        },
                        "fareDetailsBySegment": []
                    }

                    for fare_detail in traveler_pricing["fareDetailsBySegment"]:
                        modified_fare_detail = {
                            "cabin": fare_detail["cabin"]
                        }

                        modified_traveler_pricing["fareDetailsBySegment"].append(modified_fare_detail)

                    modified_flight_offer["travelerPricings"].append(modified_traveler_pricing)

                modified_response["data"].append(modified_flight_offer)

            # return JsonResponse(modified_response, safe=False) # this is the original line used to Json response TEMP TEMP TEMP 
            return render(request, 'Bingo/search_results.html', {'data': modified_response['data']})
            # return render(request, 'Bingo/search_results.html', {'flights': modified_response['data']})


        except Exception as e:
            traceback.print_exc() # needed if you want to print the the trackback information on an exception
            logger.error(f'Error processing request: {e}')
            return HttpResponseBadRequest('Error processing request')
    else:  
        logger.info("Form is not valid.")
        logger.info(f"Form errors: {form.errors}")

    return HttpResponseBadRequest('Invalid form submission')




@csrf_exempt
def flight_search(request):
    if request.method == "POST":
        try:
            json_data = json.loads(request.body)
            ret_data = get_ticket_data(json_data)
            return JsonResponse(ret_data, safe=False)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=400)

def home(request):
    return HttpResponse("Hello, world. You're at the Bingo Airlines home page.")

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\asgi.py
Contents:
"""
ASGI config for BingoAirlines project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BingoAirlines.settings')

application = get_asgi_application()
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\settings.py
Contents:
"""
Django settings for BingoAirlines project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gnd5=4@9_an$)ccgc^ufcd9&v9eapp=4q*kwscd+=ms$pmz6iy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Bingo.apps.BingoConfig',
    'Authentication.apps.AuthenticationConfig',
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BingoAirlines.urls'

LOGIN_REDIRECT_URL = '/'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'Bingo/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BingoAirlines.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'bingo_air_db',
        'HOST': 'localhost',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'SaP#12345',
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/logger.log', 
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jerusalem'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'Bingo/static/')
]

MEDIA_URL = '/Bingo/'
MEDIA_ROOT = os.path.join(BASE_DIR,'Bingo/static/images/')

# MEDIA_ROOT = os.path.join(BASE_DIR ,'static/images/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\urls.py
Contents:

from django.contrib import admin
from django.urls import path , include
from django.conf.urls.static import static
from django.conf import settings


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('Bingo.urls')),
]


urlpatterns += static(settings.MEDIA_URL ,document_root =settings.MEDIA_ROOT)
