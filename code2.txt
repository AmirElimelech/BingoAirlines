File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\migrations\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\migrations\0001_initial.py
Contents:
# Generated by Django 4.2.2 on 2023-08-05 20:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='LoginToken',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('airline', 'Airline'), ('admin', 'Admin')], max_length=10)),
            ],
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\migrations\0002_alter_logintoken_role.py
Contents:
# Generated by Django 4.2.2 on 2023-08-05 22:11

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Authentication', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='logintoken',
            name='role',
            field=models.CharField(choices=[('customer', 'Customer'), ('airline', 'Airline'), ('administrator', 'Administrator')], max_length=15),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\migrations\0003_alter_logintoken_role.py
Contents:
# Generated by Django 4.2.2 on 2023-08-05 22:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Authentication', '0002_alter_logintoken_role'),
    ]

    operations = [
        migrations.AlterField(
            model_name='logintoken',
            name='role',
            field=models.CharField(choices=[('customer', 'Customer'), ('airline company', 'Airline Company'), ('administrator', 'Administrator')], max_length=15),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\migrations\0004_alter_logintoken_role.py
Contents:
# Generated by Django 4.2.2 on 2023-08-05 22:25

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Authentication', '0003_alter_logintoken_role'),
    ]

    operations = [
        migrations.AlterField(
            model_name='logintoken',
            name='role',
            field=models.CharField(choices=[('customer', 'Customer'), ('airline company', 'Airline Company'), ('administrator', 'Administrator')], max_length=20),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\admin.py
Contents:
from django.contrib import admin

# Register your models here.
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\apps.py
Contents:
from django.apps import AppConfig


class AuthenticationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'Authentication'
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\models.py
Contents:
from django.db import models

class LoginToken(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    role = models.CharField(
        choices=[("customer", "Customer"), ("airline company", "Airline Company"), ("administrator", "Administrator")],
        max_length=20,
    )

    def __str__(self):
        return f"{self.name} - {self.role}"
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\tests.py
Contents:
from django.test import TestCase

# Create your tests here.
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Authentication\views.py
Contents:
from django.shortcuts import render

# Create your views here.
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\administrator_facade.py
Contents:
# from .facade_base import FacadeBase
# from Bingo.models import Customers, Airline_Companies, Administrators

# class AdministratorFacade(FacadeBase):

#     def get_all_customers(self):
#         return self.dal.get_all(Customers)

#     def add_airline(self, airline):
#         return self.dal.add(Airline_Companies, **airline)

#     def add_customer(self, customer):
#         user = self.create_new_user(customer['user'])
#         customer['user_id'] = user.id
#         return self.dal.add(Customers, **customer)

#     def add_administrator(self, administrator):
#         user = self.create_new_user(administrator['user'])
#         administrator['user_id'] = user.id
#         return self.dal.add(Administrators, **administrator)

#     def remove_airline(self, airline):
#         return self.dal.remove(airline)

#     def remove_customer(self, customer):
#         return self.dal.remove(customer)

#     def remove_administrator(self, administrator):
#         return self.dal.remove(administrator)


# ------------------------------------------------------------------------------------------------------------------------------


# from .facade_base import FacadeBase
# from ..models import Customers, Administrators, Airline_Companies

# class AdministratorFacade(FacadeBase):
#     def __init__(self, login_token , user):
#         super().__init__(login_token)
#         self.user = user

#     def get_all_customers(self):
#         return self.DAL.get_all(Customers)

#     def add_airline(self, airline):
#         return self.DAL.add(Airline_Companies, **airline)

#     def add_customer(self, customer):
#         return self.DAL.add(Customers, **customer)

#     def add_administrator(self, administrator):
#         return self.DAL.add(Administrators, **administrator)

#     def remove_airline(self, airline):
#         return self.DAL.remove(airline)

#     def remove_customer(self, customer):
#         return self.DAL.remove(customer)

#     def remove_administrator(self, administrator):
#         return self.DAL.remove(administrator)



# ------------------------------------------------------------------------------------------------------------------------------


from .facade_base import FacadeBase
from ..models import Customers, Administrators, Airline_Companies, Users
from django.core.exceptions import ValidationError

class AdministratorFacade(FacadeBase):
    def __init__(self, login_token, user):
        super().__init__(login_token)
        self.user = user

    def validate_admin_privileges(self):
        user_instance = Users.objects.get(id=self.user.id)
        if user_instance.user_role.role_name != "Administrator":
            raise PermissionError("You do not have the necessary privileges to perform this operation.")

    def get_all_customers(self):
        self.validate_admin_privileges()
        return self.DAL.get_all(Customers)

    def add_airline(self, airline):
        self.validate_admin_privileges()
        if Airline_Companies.objects.filter(name=airline['name']).exists():
            raise ValidationError("Airline with this name already exists.")
        if Airline_Companies.objects.filter(iata_code=airline['iata_code']).exists():
            raise ValidationError("Airline with this IATA code already exists.")
        return self.DAL.add(Airline_Companies, **airline)

    def add_customer(self, customer):
        self.validate_admin_privileges()
        # Validate phone number
        if Customers.objects.filter(phone_no=customer['phone_no']).exists():
            raise ValidationError("Customer with this phone number already exists.")
        
        # Validate email
        if Users.objects.filter(email=customer['email']).exists():
            raise ValidationError("User with this email address already exists.")
        
        return self.DAL.add(Customers, **customer)

    def add_administrator(self, administrator):
        self.validate_admin_privileges()
        if not administrator["first_name"].isalpha() or not administrator["last_name"].isalpha():
            raise ValidationError("Names should only contain letters.")
        if Administrators.objects.filter(user_id=administrator['user_id']).exists():
            raise ValidationError("This user already has an administrator account.")
        return self.DAL.add(Administrators, **administrator)

    def remove_airline(self, airline):
        self.validate_admin_privileges()
        airline_instance = self.DAL.get_by_id(Airline_Companies, airline.get("iata_code"))
        if not airline_instance:
            raise ValidationError("Airline not found.")
        return self.DAL.remove(airline_instance)

    def remove_customer(self, customer):
        self.validate_admin_privileges()
        customer_instance = self.DAL.get_by_id(Customers, customer.get("id"))
        if not customer_instance:
            raise ValidationError("Customer not found.")
        return self.DAL.remove(customer_instance)

    def remove_administrator(self, administrator):
        self.validate_admin_privileges()
        admin_instance = self.DAL.get_by_id(Administrators, administrator.get("id"))
        if not admin_instance:
            raise ValidationError("Administrator not found.")
        return self.DAL.remove(admin_instance)

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\airline_facade.py
Contents:
# from .facade_base import FacadeBase
# from Bingo.models import Flights, Airline_Companies

# class AirlineFacade(FacadeBase):

#     def get_my_flights(self, airline_id):
#         return self._dal.get_flights_by_airline_id(airline_id)

#     def update_airline(self, airline):
#         return self._dal.update(Airline_Companies, **airline)

#     def add_flight(self, flight):
#         return self._dal.add(Flights, **flight)

#     def update_flight(self, flight):
#         return self._dal.update(Flights, **flight)

#     def remove_flight(self, flight):
#         return self._dal.remove(flight)


# ------------------------------------------------------------------------------------------------------------------------------


# from .facade_base import FacadeBase
# from ..models import Airline_Companies, Flights
# from django.core.exceptions import ValidationError

# class AirlineFacade(FacadeBase):
#     def __init__(self, login_token, user):
#         super().__init__(login_token)
#         self.user = user

#     def get_my_flights(self):
#         return self.DAL.get_flights_by_airline_id(self.user.airline_company.iata_code)

#     def add_flight(self, flight):
#         if flight.get("remaining_tickets") <= 0:
#             raise ValidationError("Number of remaining tickets should be greater than 0.")
#         if flight.get("landing_time") <= flight.get("departure_time"):
#             raise ValidationError("Landing time can't be before or equal to departure time.")
        
#         # Assuming airline_company_id is passed in the flight data dictionary
#         if flight.get("airline_company_id") != self.user.airline_company.iata_code:
#             raise PermissionError("Airline companies can only add flights for their own company.")
        
#         return self.DAL.add(Flights, **flight)

#     def update_flight(self, flight):
#         flight_instance = self.DAL.get_by_id(Flights, flight.get("id"))
        
#         if flight_instance.airline_company_id.iata_code != self.user.airline_company.iata_code:
#             raise PermissionError("Airline companies can only edit their own flights.")
        
#         return self.DAL.update(flight_instance, **flight)

#     def remove_flight(self, flight):
#         flight_instance = self.DAL.get_by_id(Flights, flight.get("id"))
        
#         if flight_instance.airline_company_id.iata_code != self.user.airline_company.iata_code:
#             raise PermissionError("Airline companies can only delete their own flights.")
        
#         return self.DAL.remove(flight_instance)
    





from .facade_base import FacadeBase
from ..models import Airline_Companies, Flights
from django.core.exceptions import ValidationError

class AirlineFacade(FacadeBase):
    def __init__(self, login_token, user):
        super().__init__(login_token)
        self.user = user

    def get_my_flights(self):
        return self.DAL.get_flights_by_airline_id(self.user.airline_company.iata_code)

    def validate_airline_company(self):
        # Fetch the airline company
        airline_company = self.DAL.get_by_id(Airline_Companies, self.user.airline_company.iata_code)
        
        # Check if the airline company exists
        if not airline_company:
            raise ValidationError("Airline company not found.")


        return airline_company

    def validate_flight_data(self, flight):
        if flight.get("remaining_tickets") <= 0:
            raise ValidationError("Number of remaining tickets should be greater than 0.")
        if flight.get("landing_time") <= flight.get("departure_time"):
            raise ValidationError("Landing time can't be before or equal to departure time.")

    def add_flight(self, flight):
        self.validate_airline_company()
        self.validate_flight_data(flight)
        
        if flight.get("airline_company_id") != self.user.airline_company.iata_code:
            raise PermissionError("Airline companies can only add flights for their own company.")
        
        return self.DAL.add(Flights, **flight)

    def update_flight(self, flight):
        flight_instance = self.DAL.get_by_id(Flights, flight.get("id"))
        
        # Check if the flight exists
        if not flight_instance:
            raise ValidationError("Flight not found.")

        self.validate_airline_company()
        self.validate_flight_data(flight)
        
        if flight_instance.airline_company_id.iata_code != self.user.airline_company.iata_code:
            raise PermissionError("Airline companies can only edit their own flights.")
        
        for attr, value in flight.items():
            setattr(flight_instance, attr, value)
        flight_instance.save()

        return flight_instance

    def remove_flight(self, flight):
        flight_instance = self.DAL.get_by_id(Flights, flight.get("id"))
        
        if not flight_instance:
            raise ValidationError("Flight not found.")

        self.validate_airline_company()

        if flight_instance.airline_company_id.iata_code != self.user.airline_company.iata_code:
            raise PermissionError("Airline companies can only delete their own flights.")
        
        return self.DAL.remove(flight_instance)





-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\anonymous_facade.py
Contents:

# from .customer_facade import CustomerFacade
# from .airline_facade import AirlineFacade
# from .administrator_facade import AdministratorFacade


# from django.contrib.auth.models import User
# from .facade_base import FacadeBase
# from django.contrib.auth.hashers import check_password
# from Bingo.models import Customers, Users
# from django.contrib.auth import authenticate
# from .facade_base import FacadeBase

# class AnonymousFacade(FacadeBase):

#     def login(self, request, username, password):
#         user = authenticate(request, username=username, password=password)
#         if user is not None:
#             if user.is_active:
#                 if user.user_role.role_name == 'Customer':
#                     return CustomerFacade(), user.id
#                 elif user.user_role.role_name == 'Airline':
#                     return AirlineFacade(), user.id
#                 elif user.user_role.role_name == 'Administrator':
#                     return AdministratorFacade(), user.id
#         raise ValueError('Invalid credentials')

#     def add_customer(self, customer):
#         # assuming 'customer' is a dictionary containing the details of the customer
#         user = User.objects.create_user(username=customer['user']['username'], password=customer['user']['password'])
#         customer['user_id'] = user.id
#         return self._dal.add(Customers, **customer)
    






# ------------------------------------------------------------------------------------------------------------------------------

from .customer_facade import CustomerFacade
from .airline_facade import AirlineFacade
from .administrator_facade import AdministratorFacade
from .facade_base import FacadeBase
from ..models import Customers, Users
from Authentication.models import LoginToken
from django.contrib.auth.hashers import check_password
from django.core.exceptions import ValidationError

class AnonymousFacade(FacadeBase):
    # def login(self, username, password):
    #     user = self.DAL.get_user_by_username(username)
    #     # if user is not None and user.check_password(password):
    #     if user is not None and check_password(password, user.password):
    #         # Create the LoginToken object with user information
    #         login_token = LoginToken(name=user.username, role='customer')
    #         login_token.save() 
    #         return CustomerFacade(login_token), user.id
    #     elif user.user_role.role_name == 'Airline':
    #         # Create the LoginToken object with user information
    #         login_token = LoginToken(name=user.username, role='airline')
    #         login_token.save() 
    #         return AirlineFacade(login_token), user.id
    #     elif user.user_role.role_name == 'Administrator':
    #         # Create the LoginToken object with user information
    #         login_token = LoginToken(name=user.username, role='administrator')
    #         login_token.save() 
    #         return AdministratorFacade(login_token), user.id
    #     return None

    def login(self, username, password):
        user = self.DAL.get_user_by_username(username)

        if user is None:
            raise ValidationError("User not found")
        if not check_password(password, user.password):
            raise ValidationError("Incorrect password")
        
        # if user is not None and user.check_password(password):
        if user is not None and check_password(password, user.password):
            # Determine the role of the user
            role = None
            if user.user_role.role_name == 'Customer':
                role = 'customer'
            elif user.user_role.role_name == 'Airline Company':
                role = 'airline company'
            elif user.user_role.role_name == 'Administrator':
                role = 'administrator'

            # Create the LoginToken object with user information
            login_token = LoginToken(name=user.username, role=role)
            login_token.save()
            
            # Return the appropriate facade based on the user's role and the login token
            if role == 'customer':
                return login_token, CustomerFacade(login_token, user), user.id
            elif role == 'airline company':
                return login_token, AirlineFacade(login_token, user), user.id
            elif role == 'administrator':
                return login_token, AdministratorFacade(login_token, user), user.id

        # If the login fails
        return None ,None, None

    def add_customer(self, customer):
        user = Users.objects.create_user(username=customer['user']['username'], password=customer['user']['password'])
        customer['user_id'] = user.id
        return self.DAL.add(Customers, **customer)


-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\customer_facade.py
Contents:
# from .facade_base import FacadeBase
# from Bingo.models import Tickets, Customers

# class CustomerFacade(FacadeBase):

#     def update_customer(self, customer):
#         return self._dal.update(Customers, **customer)

#     def add_ticket(self, ticket):
#         return self._dal.add(Tickets, **ticket)

#     def remove_ticket(self, ticket):
#         return self._dal.remove(ticket)

#     def get_my_tickets(self, customer_id):
#         return self._dal.get_tickets_by_customer(customer_id)


# ------------------------------------------------------------------------------------------------------------------------------


from .facade_base import FacadeBase
from ..models import Customers, Tickets, Flights
from django.core.exceptions import ValidationError
from django.utils import timezone

class CustomerFacade(FacadeBase):
    def __init__(self, login_token, user):
        super().__init__(login_token)
        self.user = user

    def update_customer(self, customer):
        # Retrieve the existing customer instance
        existing_customer = self.DAL.get_by_id(Customers, customer["id"])

        # Check if the customer exists
        if not existing_customer:
            raise ValidationError("Customer not found.")

        # Validate names
        if not customer["first_name"].isalpha() or not customer["last_name"].isalpha():
            raise ValidationError("Names should only contain letters.")
        
        # Validate address length dynamically
        max_address_length = Customers._meta.get_field('address').max_length
        if len(customer["address"]) > max_address_length:
            raise ValidationError(f"Address is too long. Maximum allowed length is {max_address_length} characters.")
        
        # Validate Credit Card Number
        card_num = customer["credit_card_no"]
        if len(card_num) not in [13, 15, 16] or not card_num.isdigit():
            raise ValidationError("Credit card number should be 13, 15, or 16 digits long.")

        # Update the existing customer record
        for attr, value in customer.items():
            setattr(existing_customer, attr, value)
        existing_customer.save()

        return existing_customer

    def add_ticket(self, ticket):
        flight = self.DAL.get_by_id(Flights, ticket["flight_id"])
        if flight.remaining_tickets <= 0:
            raise ValidationError("Sorry, this flight is fully booked.")

        return self.DAL.add(Tickets, **ticket)

    def remove_ticket(self, ticket):
        ticket_instance = self.DAL.get_by_id(Tickets, ticket.get("id"))

        # Check if ticket exists
        if not ticket_instance:
            raise ValidationError("Ticket not found.")

        # Validate that the ticket belongs to the user
        if ticket_instance.customer_id != self.user.customer.id:
            raise PermissionError("You can only remove your own tickets.")

        # Check if flight has already departed
        if ticket_instance.flight.departure_time <= timezone.now():
            raise ValidationError("You can't remove a ticket after the flight's departure.")

        return self.DAL.remove(ticket)

    def get_my_tickets(self):
        return self.DAL.get_tickets_by_customer(self.user.customer.id)

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\facades\facade_base.py
Contents:
# from abc import ABC, abstractmethod
# from Bingo.models import DAL
# from django.contrib.auth.hashers import make_password
# from models import Users, Airline_Companies, Flights, Countries




# class FacadeBase(ABC):

#     def __init__(self):
#         self.dal = DAL()

#     def get_all_flights(self):
#         return self.dal.get_all(Flights)

#     def get_flight_by_id(self, id):
#         return self.dal.get_by_id(Flights, id)

#     def get_flights_by_parameters(self, origin_country_id, destination_country_id, date):
#         return self.dal.get_flights_by_parameters(origin_country_id, destination_country_id, date)

#     def get_all_airlines(self):
#         return self.dal.get_all(Airline_Companies)
    
#     def get_airline_by_parameters(self, country_id=None):
#         airlines = self.dal.get_all(Airline_Companies)
        
#         if country_id is not None:
#             airlines = airlines.filter(country_id=country_id)
        
#         return airlines
    
#     def get_airline_by_id(self, id):
#         return self.dal.get_by_id(Airline_Companies, id)

#     def get_all_countries(self):
#         return self.dal.get_all(Countries)

#     def get_country_by_id(self, id):
#         return self.dal.get_by_id(Countries, id)

#     def create_new_user(self, user):
#         # assuming 'user' is a dictionary containing the details of the user
#         user['password'] = make_password(user['password'])
#         return self.dal.add(Users, **user)
    



# ------------------------------------------------------------------------------------------------------------------------------




from ..models import DAL, Users, Airline_Companies, Flights, Countries , User_Roles
from django.core.exceptions import ValidationError
from django.contrib.auth.hashers import make_password
import re

class FacadeBase:
    def __init__(self , login_token = None):
        self.DAL = DAL()
        self.login_token = login_token
    
    def get_all_flights(self):
        return self.DAL.get_all(Flights)

    def get_flight_by_id(self, id):
        return self.DAL.get_by_id(Flights, id)

    def get_flights_by_parameters(self, origin_country_id, destination_country_id, date):
        return self.DAL.get_flights_by_parameters(origin_country_id, destination_country_id, date)

    def get_all_airlines(self):
        return self.DAL.get_all(Airline_Companies)

    def get_airline_by_id(self, id):
        return self.DAL.get_by_id(Airline_Companies, id)

    def get_all_countries(self):
        return self.DAL.get_all(Countries)

    def get_country_by_id(self, id):
        return self.DAL.get_by_id(Countries, id)

    # def create_new_user(self, user):
    #     id = user.get("id")
    #     username = user.get("username")
    #     email = user.get("email")
    #     password = user.get("password")
    #     user_role = user.get("user_role")
    #     image = user.get("image")
        
    #     if Users.objects.filter(username=username).exists():
    #         raise ValidationError("Username already exists")
            
    #     if Users.objects.filter(email=email).exists():
    #         raise ValidationError("Email already exists")
        
        
    #     password = make_password(password)  # hash the password before saving
    #     user_data = {'id':id ,'username': username, 'email': email, 'password': password, 'user_role': user_role, 'image': image}
        
    #     created_user = self.DAL.add(Users, **user_data)
    #     print("Created User: ", created_user)
    #     return created_user

    def create_new_user(self, user):
        # ID Validity
        if not re.match(r"^\d{9}$", user.get("id")):
            raise ValidationError("ID should be exactly 9 digits.")
            
        # Username Validity
        if not (3 <= len(user.get("username")) <= 20) or not re.match(r"^\w+$", user.get("username")):
            raise ValidationError("Username should be between 3 and 20 characters and contain only alphanumeric characters and underscores.")

        # Email Validity
        if Users.objects.filter(email=user.get("email")).exists():
            raise ValidationError("Email already exists")

        # Password Strength regex for password validation checks for at least one uppercase letter, one lowercase letter, one number, and one special character
        if len(user.get("password")) < 6 or not re.match(r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$", user.get("password")):
            raise ValidationError("Password should be at least 6 characters, contain an uppercase and lowercase letter, a digit, and a special character.")

        # User Role Validity
        if not User_Roles.objects.filter(role_name=user.get("user_role")).exists():
            raise ValidationError("Provided user role does not exist.")

        
        password = make_password(user.get("password"))  # hash the password before saving
        user_data = {
            'id': user.get("id"),
            'username': user.get("username"),
            'email': user.get("email"),
            'password': password,
            'user_role': user.get("user_role"),
            'image': user.get("image")
        }
        
        created_user = self.DAL.add(Users, **user_data)
        print("Created User: ", created_user)
        return created_user





-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\management\commands\populate_airlinecompanies.py
Contents:
import pandas as pd
from django.core.management.base import BaseCommand
from django.core.files import File
from tempfile import NamedTemporaryFile
import requests
from Bingo.models import Users, Countries, Airline_Companies

class Command(BaseCommand):
    help = 'Loads airline companies from airlinecompaniespopulate.csv file into the database'

    def handle(self, *args, **options):
        # Read the country mapping from countries.csv
        country_df = pd.read_csv('Bingo/management/commands/countries.csv')
        country_mapping = {name: code for name, code in zip(country_df['Country name'], country_df['Country Code'])}

        df = pd.read_csv('Bingo/management/commands/airlinecompaniespopulate.csv', keep_default_na=False)

        for index, row in df.iterrows():
            iata_code = row['IATA']
            airline_name = row['Airline']
            country_name = row['Country']
            user_id = str(row['ID']).zfill(9)  # Pad the ID with leading zeros
            logo_url = row['Logo']

            # Check if airline_name is a valid string
            if isinstance(airline_name, str):
                # Get corresponding user for the airline
                try:
                    user = Users.objects.get(id=user_id)
                except Users.DoesNotExist:
                    self.stdout.write(self.style.WARNING(f"User not found for airline: {airline_name} (ID: {user_id})"))
                    continue

                # Get corresponding country for the airline
                country_code = None
                for key, value in country_mapping.items():
                    if key.startswith(country_name):
                        country_code = value
                        break

                if country_code is None:
                    self.stdout.write(self.style.WARNING(f"Country not found in mapping: {country_name}"))
                    continue

                try:
                    country = Countries.objects.get(country_code=country_code)
                except Countries.DoesNotExist:
                    self.stdout.write(self.style.WARNING(f"Country not found in database: {country_code}"))
                    continue

                # Check if the airline with the same iata_code already exists
                if Airline_Companies.objects.filter(iata_code=iata_code).exists():
                    self.stdout.write(self.style.WARNING(f"Skipping duplicate entry: {airline_name} (IATA Code: {iata_code})"))
                    continue
                
                # Create a new airline company
                airline_company = Airline_Companies(iata_code=iata_code, name=airline_name, country_id=country, user_id=user)

                 # Save logo
                img_temp = NamedTemporaryFile(delete=True)
                response = requests.get(logo_url)
                if response.status_code == 200:  # Logo was successfully downloaded
                    img_temp.write(response.content)
                    img_temp.flush()
                    airline_company.logo.save(f"{iata_code}.png", File(img_temp))
                else:  # Logo was not available, use default image
                    airline_company.logo = '/airline_logos/airplanelogo.png'

                # Save airline company
                airline_company.save()

                self.stdout.write(self.style.SUCCESS(f"Successfully added airline company: {airline_name}"))
            else:
                self.stdout.write(self.style.WARNING(f"Skipping invalid entry: {airline_name}"))


    
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\management\commands\populate_airlines.py
Contents:

import pandas as pd
from django.core.management.base import BaseCommand
from Bingo.models import Users, Countries

class Command(BaseCommand):
    help = 'Loads airlines from airlineuserspopulate.csv file into the database'

    def handle(self, *args, **options):
        # df = pd.read_csv('Bingo/management/commands/airlineuserspopulate.csv')
        df = pd.read_csv('Bingo/management/commands/airlineuserspopulate.csv', dtype={'ID': 'Int64'})

        for index, row in df.iterrows():
            iata_code = row['IATA']
            airline_name = row['Airline']
            country_name = row['Country']
            airline_id = str(row['ID']).zfill(9)  # Pad the ID with leading zeros

            # Check if airline_name is a valid string
            if isinstance(airline_name, str):
                # Generate email and password based on airline name
                email = airline_name.lower().replace(" ", "") + "@mail.com"
                password = airline_name.lower().replace(" ", "")

                # Check if the user with the same email already exists
                if Users.objects.filter(email=email).exists():
                    self.stdout.write(self.style.WARNING(f"Skipping duplicate entry: {airline_name} ({email})"))
                    continue

                # Check if the user with the same username already exists
                if Users.objects.filter(username=airline_name).exists():
                    self.stdout.write(self.style.WARNING(f"Skipping duplicate entry: {airline_name}"))
                    continue

                # Create a new user
                user = Users(id=airline_id, username=airline_name, email=email, user_role_id=2)  # Assuming user_role_id 2 corresponds to the airline company role
                user.password = password  # Set the user's password
                user.save()

                self.stdout.write(self.style.SUCCESS(f"Successfully added user: {airline_name}"))
            else:
                self.stdout.write(self.style.WARNING(f"Skipping invalid entry: {airline_name}"))
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\management\commands\populate_airports.py
Contents:
import pandas as pd
from django.core.management.base import BaseCommand
from Bingo.models import Airport

class Command(BaseCommand):
    help = 'Loads airports from airports.csv file into the database'

    def handle(self, *args, **options):
        df = pd.read_csv('Bingo/management/commands/airportspopulate.csv')

        for index, row in df.iterrows():
            try:
                airport, created = Airport.objects.get_or_create(iata_code=row['IATA code'],
                                                                  defaults={'name': row['Airport']})

                if not created:
                    print(f"Airport with IATA code {row['IATA code']} already exists. Skipped.")

            except Exception as e:
                print(f"Error on row {index}: {row}")
                print(f"Exception: {e}")
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\management\commands\populate_countries.py
Contents:
import pandas as pd
from django.core.management.base import BaseCommand
from Bingo.models import Countries

class Command(BaseCommand):
    help = 'Loads countries from countries.csv file into the database'

    def handle(self, *args, **options):
        df = pd.read_csv('Bingo/management/commands/countries.csv')

        for index, row in df.iterrows():
            try:
                country = Countries(name=row['Country name'], country_code=row['Country Code'])
                country.save()
            except Exception as e:
                print(f"Error on row {index}: {row}")
                print(f"Exception: {e}")
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0001_initial.py
Contents:
# Generated by Django 4.2.2 on 2023-06-17 20:31

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Airline_Companies',
            fields=[
                ('iata_code', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('country_code', models.CharField(max_length=2, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('first_name', models.TextField()),
                ('last_name', models.TextField()),
                ('address', models.TextField()),
                ('phone_no', models.CharField(max_length=15, unique=True)),
                ('credit_card_no', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Flights',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('departure_time', models.DateTimeField()),
                ('landing_time', models.DateTimeField()),
                ('remaining_tickets', models.IntegerField()),
                ('airline_company_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.airline_companies')),
                ('destination_country_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destination_flights', to='Bingo.countries')),
                ('origin_country_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='origin_flights', to='Bingo.countries')),
            ],
        ),
        migrations.CreateModel(
            name='User_Roles',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('image', models.ImageField(default='static/defaultuser.png', null=True, upload_to='users/')),
                ('user_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.user_roles')),
            ],
        ),
        migrations.CreateModel(
            name='Tickets',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.customers')),
                ('flight_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.flights')),
            ],
        ),
        migrations.AddField(
            model_name='customers',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.users', unique=True),
        ),
        migrations.AddField(
            model_name='airline_companies',
            name='country_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.countries'),
        ),
        migrations.AddField(
            model_name='airline_companies',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.users', unique=True),
        ),
        migrations.CreateModel(
            name='Administrators',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('first_name', models.TextField()),
                ('last_name', models.TextField()),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.users', unique=True)),
            ],
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0002_alter_administrators_options_and_more.py
Contents:
# Generated by Django 4.2.2 on 2023-06-20 20:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='administrators',
            options={'verbose_name_plural': 'Administrators'},
        ),
        migrations.AlterModelOptions(
            name='airline_companies',
            options={'verbose_name_plural': 'Airline Companies'},
        ),
        migrations.AlterModelOptions(
            name='countries',
            options={'verbose_name_plural': 'Countries'},
        ),
        migrations.AlterModelOptions(
            name='customers',
            options={'verbose_name_plural': 'Customers'},
        ),
        migrations.AlterModelOptions(
            name='flights',
            options={'verbose_name_plural': 'Flights'},
        ),
        migrations.AlterModelOptions(
            name='tickets',
            options={'verbose_name_plural': 'Tickets'},
        ),
        migrations.AlterModelOptions(
            name='user_roles',
            options={'verbose_name_plural': 'User Roles'},
        ),
        migrations.AlterModelOptions(
            name='users',
            options={'verbose_name_plural': 'Users'},
        ),
        migrations.AlterField(
            model_name='users',
            name='id',
            field=models.CharField(max_length=9, primary_key=True, serialize=False),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0003_alter_users_id_alter_users_image.py
Contents:
# Generated by Django 4.2.2 on 2023-06-20 21:31

import Bingo.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0002_alter_administrators_options_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='users',
            name='id',
            field=models.CharField(max_length=9, primary_key=True, serialize=False, validators=[Bingo.models.validate_nine_digits]),
        ),
        migrations.AlterField(
            model_name='users',
            name='image',
            field=models.ImageField(default='static/users/defaultuser.png', null=True, upload_to='users/'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0004_alter_users_image.py
Contents:
# Generated by Django 4.2.2 on 2023-06-20 21:36

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0003_alter_users_id_alter_users_image'),
    ]

    operations = [
        migrations.AlterField(
            model_name='users',
            name='image',
            field=models.ImageField(default='static/images/users/defaultuser.png', null=True, upload_to='users/'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0005_alter_users_image.py
Contents:
# Generated by Django 4.2.2 on 2023-06-20 21:38

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0004_alter_users_image'),
    ]

    operations = [
        migrations.AlterField(
            model_name='users',
            name='image',
            field=models.ImageField(default='/images/users/defaultuser.png', null=True, upload_to='users/'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0006_alter_users_image.py
Contents:
# Generated by Django 4.2.2 on 2023-06-20 21:43

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0005_alter_users_image'),
    ]

    operations = [
        migrations.AlterField(
            model_name='users',
            name='image',
            field=models.ImageField(default='/users/defaultuser.png', null=True, upload_to='users/'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0007_airline_companies_logo.py
Contents:
# Generated by Django 4.2.2 on 2023-06-21 00:39

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0006_alter_users_image'),
    ]

    operations = [
        migrations.AddField(
            model_name='airline_companies',
            name='logo',
            field=models.ImageField(blank=True, default='/airline_logos/airplanelogo.png', null=True, upload_to='airline_logos'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0008_alter_airline_companies_logo.py
Contents:
# Generated by Django 4.2.2 on 2023-06-21 02:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0007_airline_companies_logo'),
    ]

    operations = [
        migrations.AlterField(
            model_name='airline_companies',
            name='logo',
            field=models.ImageField(blank=True, default='/airline_logos/airplanelogo.png', null=True, upload_to='airline_logos/'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0009_alter_flights_remaining_tickets.py
Contents:
# Generated by Django 4.2.2 on 2023-06-23 14:03

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0008_alter_airline_companies_logo'),
    ]

    operations = [
        migrations.AlterField(
            model_name='flights',
            name='remaining_tickets',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(0)]),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0010_airport.py
Contents:
# Generated by Django 4.2.2 on 2023-07-08 08:54

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0009_alter_flights_remaining_tickets'),
    ]

    operations = [
        migrations.CreateModel(
            name='Airport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('iata_code', models.CharField(max_length=3)),
            ],
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0011_alter_users_user_role.py
Contents:
# Generated by Django 4.2.2 on 2023-07-30 07:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0010_airport'),
    ]

    operations = [
        migrations.AlterField(
            model_name='users',
            name='user_role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Bingo.user_roles'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0012_users_is_staff.py
Contents:
# Generated by Django 4.2.2 on 2023-07-30 07:27

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0011_alter_users_user_role'),
    ]

    operations = [
        migrations.AddField(
            model_name='users',
            name='is_staff',
            field=models.BooleanField(default=False),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0013_remove_users_is_staff.py
Contents:
# Generated by Django 4.2.2 on 2023-07-31 20:01

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0012_users_is_staff'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='users',
            name='is_staff',
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\migrations\0014_alter_users_user_role.py
Contents:
# Generated by Django 4.2.2 on 2023-07-31 20:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('Bingo', '0013_remove_users_is_staff'),
    ]

    operations = [
        migrations.AlterField(
            model_name='users',
            name='user_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Bingo.user_roles'),
        ),
    ]
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\utils\amadeus.py
Contents:
import requests
import os
import json


def get_token():
    url = "https://api.amadeus.com/v1/security/oauth2/token"
    # payload = 'grant_type=client_credentials&client_id=7IgQrqy0G2E0lcouQ7B3Dlo3bR43pUKi&client_secret=ZeW3niQftvla34pB' this is the old not so working token that got hacked 
    payload = 'grant_type=client_credentials&client_id=OEAF6GngPrGt0kXZklcxsviCcYAWo5TB&client_secret=9VF9tuFtnHeVbjkC' # this is the new token that works
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    response = requests.request("POST", url, headers=headers, data=payload)
    token = response.json()['access_token']
    os.environ["amadeus-api-token"] = token
    return token


def get_ticket_data(data):
    get_token()
    url = "https://api.amadeus.com/v2/shopping/flight-offers"

    payload = json.dumps(data)
    headers = {
        'Authorization': f'Bearer {os.environ["amadeus-api-token"]}',
        'Content-Type': 'application/json'
    }

    response = requests.request("POST", url, headers=headers, data=payload)

    return response.json()
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\admin.py
Contents:
from django.contrib import admin
from .models import Flights, Countries, Tickets, Airline_Companies, Customers, Users, User_Roles, Administrators , Airport
from .models import Airline_Companies
import requests
from django.core.files import File
from io import BytesIO


class AirlineCompaniesAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        if not obj.logo:  # If no logo file is uploaded
            url = f'https://content.r9cdn.net/rimg/provider-logos/airlines/v/{obj.iata_code}.png?crop=false&width=100&height=100'
            response = requests.get(url)
            if response.status_code == 200:
                # Save the logo to the ImageField
                img_temp = BytesIO()
                img_temp.write(response.content)
                img_temp.seek(0)
                obj.logo.save(f'{obj.iata_code}.png', File(img_temp), save=False)
        
        super().save_model(request, obj, form, change)


admin.site.register(Airline_Companies, AirlineCompaniesAdmin)
admin.site.register(Flights)
admin.site.register(Countries)
admin.site.register(Tickets)
admin.site.register(Customers)
admin.site.register(Users)
admin.site.register(User_Roles)
admin.site.register(Administrators)
admin.site.register(Airport)

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\apps.py
Contents:
from django.apps import AppConfig


class BingoConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'Bingo'
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\Countries.py
Contents:
import pandas as pd
from Bingo.models import Countries  # replace with your actual models module

df = pd.read_csv('countries.csv')

for index, row in df.iterrows():
    country = Countries(name=row['Country name'], country_code=row['Country Code'])
    country.save()
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\forms.py
Contents:
from django import forms
from .models import Users



class UsersForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput())

    class Meta:
        model = Users
        fields = ['id', 'username', 'password', 'email', 'user_role', 'image']

    def clean(self):
        cleaned_data = super().clean()
        password = cleaned_data.get("password")


        return cleaned_data
    



-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\models.py
Contents:
from datetime import timedelta
from django.db import models
import requests
from django.core import validators
from io import BytesIO
from django.core.files.base import ContentFile
import urllib
from django.core.files import File
import logging
from django.core.validators import MinValueValidator
import string , random
from django.db import models
from django.utils import timezone
from django.db.models import Q
from django.utils import timezone
from datetime import timedelta
from django.db import models
from django.core.validators import MinValueValidator
import string
import random





class Flights(models.Model):
    id = models.BigAutoField(primary_key=True)
    airline_company_id = models.ForeignKey('Airline_Companies', to_field='iata_code', on_delete=models.CASCADE)
    origin_country_id = models.ForeignKey('Countries', on_delete=models.CASCADE, related_name='origin_flights')
    destination_country_id = models.ForeignKey('Countries', on_delete=models.CASCADE, related_name='destination_flights')
    departure_time = models.DateTimeField(null=False)
    landing_time = models.DateTimeField(null=False)
    remaining_tickets = models.IntegerField(null=False, validators=[MinValueValidator(0)])

    def __str__(self):
        return f'Flight {self.id}'
    
    class Meta:
        verbose_name_plural = "Flights"





# Countries model represents different countries
class Countries(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=255, unique=True)
    country_code = models.CharField(max_length=2, unique=True)

    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name_plural = "Countries"

        
    
        


# Tickets model represents individual flight tickets
class Tickets(models.Model):
    id = models.BigAutoField(primary_key=True)
    flight_id = models.ForeignKey(Flights, on_delete=models.CASCADE)
    customer_id = models.ForeignKey('Customers', on_delete=models.CASCADE)

    def __str__(self):
        return f'Ticket {self.id}'
    
    class Meta:
        verbose_name_plural = "Tickets"
    
logger = logging.getLogger(__name__)


class Airline_Companies(models.Model):
    iata_code = models.CharField(max_length=2, primary_key=True)
    name = models.CharField(max_length=255, unique=True)
    country_id = models.ForeignKey(Countries, on_delete=models.CASCADE)
    user_id = models.ForeignKey('Users', on_delete=models.CASCADE, unique=True)
    logo = models.ImageField(upload_to='airline_logos/', default='/airline_logos/airplanelogo.png', null=True, blank=True)

    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name_plural = "Airline Companies"


    def save(self, *args, **kwargs):
        logger.info(f"Attempting to save Airline_Companies instance with iata_code: {self.iata_code}")

        if self.iata_code and not self.logo:
            # Download the logo from the URL
            url = f'https://content.r9cdn.net/rimg/provider-logos/airlines/v/{self.iata_code}.png?crop=false&width=100&height=100'
            try:
                response = urllib.request.urlopen(url)
                if response.status == 200:
                    # Save the logo to the ImageField
                    filename = f'{self.iata_code}.png'
                    self.logo.save(filename, File(response), save=False)
                    logger.info(f"Downloaded and saved logo for {self.iata_code} from {url}")
                else:
                    self.logo = 'airplanelogo.png'
                    logger.warning(f"Received status {response.status} when trying to download logo from {url}")
            except Exception as e:
                self.logo = 'airplanelogo.png'
                logger.error(f"Error when trying to download logo from {url}: {e}")

        # If logo wasn't specified and couldn't be downloaded, use the default logo
        if not self.logo:
            self.logo = 'airplanelogo.png'
        
        super().save(*args, **kwargs)
        logger.info(f"Saved Airline_Companies instance with iata_code: {self.iata_code}")

  
    @property
    def image_url(self):
        if self.logo:
            return self.logo.url
        else:
            return '/media/airplanelogo.png" style="width: 100px; height: 100px;"'

        

# Customers model represents individual customers
class Customers(models.Model):
    id = models.BigAutoField(primary_key=True)
    first_name = models.TextField(null=False)
    last_name = models.TextField(null=False)
    address = models.TextField(null=False)
    phone_no = models.CharField(max_length=15, unique=True, null=False)
    credit_card_no = models.CharField(max_length=50, unique=True, null=False)
    user_id = models.ForeignKey('Users', on_delete=models.CASCADE, unique=True)

    def __str__(self):
        return f'{self.first_name} {self.last_name}'
    
    class Meta:
        verbose_name_plural = "Customers"
    
    # Method to retrieve the image URL of the customer's profile picture
    @property
    def image_url(self):
        try:
            url = self.user_id.image.url
        except:
            url = ''
        return url
    
    
    # Method to retrieve a masked version of the customer's credit card number leaving only the last 4 digits
    @property
    def masked_credit_card(self):
        return '*' * (len(self.credit_card_no) - 4) + self.credit_card_no[-4:]
    


def validate_nine_digits(value):
    if len(str(value)) != 9:
        raise validators.ValidationError("ID must be exactly 9 digits long.")


# Users model represents individual user accounts
class Users(models.Model):
    id = models.CharField(max_length=9, primary_key=True, validators=[validate_nine_digits])
    username = models.CharField(max_length=255, unique=True, null=False)
    password = models.CharField(max_length=255, null=False)
    email = models.EmailField(max_length=255, unique=True, null=False)
    user_role = models.ForeignKey('User_Roles', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='users/', default='/users/defaultuser.png', null=True)

    def __str__(self):
        return self.username
    
    class Meta:
        verbose_name_plural = "Users"


    # Method to retrieve the image URL of the user's profile picture if none exists returns default image
    @property
    def image_url(self):
        try:
            url = self.image.url
        except:
            url = ''
        return url
    

# User_Roles model represents different user roles ()
class User_Roles(models.Model):
    id = models.AutoField(primary_key=True)
    role_name = models.CharField(max_length=255, unique=True, null=False)

    def __str__(self):
        return self.role_name
    
    class Meta:
        verbose_name_plural = "User Roles"
    

# Administrators model represents different administrators
class Administrators(models.Model):
    id = models.BigAutoField(primary_key=True)
    first_name = models.TextField(null=False)
    last_name = models.TextField(null=False)
    user_id = models.ForeignKey('Users', on_delete=models.CASCADE, unique=True)

    def __str__(self):
        return f'{self.first_name} {self.last_name}'
    
    class Meta:
        verbose_name_plural = "Administrators"



class Airport(models.Model):
    name = models.CharField(max_length=255)
    iata_code = models.CharField(max_length=3)

    def __str__(self):
        return self.name
    



class DAL:
    def get_by_id(self, model, id):
        try:
            return model.objects.get(id=id)
        except model.DoesNotExist:
            return None

    def get_all(self, model):
        try:
            return model.objects.all()
        except Exception as e:
            return None

    def add(self, model, **kwargs):
        try:
            instance = model.objects.create(**kwargs)
            if instance:
                logger.info(f"Successfully created {model.__name__} instance: {instance}")
                return instance
            else:
                logger.error(f"Failed to create {model.__name__} instance with kwargs: {kwargs}")
                return None
        except Exception as e:
            logger.error(f"Error creating {model.__name__} instance with kwargs: {kwargs}. Error: {str(e)}")
            return None


    def update(self, instance, **kwargs):
        try:
            for attr, value in kwargs.items():
                setattr(instance, attr, value)
            instance.save()
            return instance
        except Exception as e:
            return None

    def add_all(self, model, list_of_dicts):
        try:
            return model.objects.bulk_create([model(**kwargs) for kwargs in list_of_dicts])
        except Exception as e:
            return None

    def remove(self, instance):
        try:
            instance.delete()
        except Exception as e:
            return None

    # Additional methods
    def getAirlinesByCountry(self, country_id):
        try:
            return Airline_Companies.objects.filter(country_id=country_id)
        except Exception as e:
            return None

    def getFlightsByOriginCountryId(self, country_id):
        try:
            return Flights.objects.filter(origin_id=country_id)
        except Exception as e:
            return None

    def getFlightsByDestinationCountryId(self, country_id):
        try:
            return Flights.objects.filter(destination_id=country_id)
        except Exception as e:
            return None

    def getFlightsByDepartureDate(self, date):
        try:
            return Flights.objects.filter(departure_date=date)
        except Exception as e:
            return None

    def getFlightsByLandingDate(self, date):
        try:
            return Flights.objects.filter(landing_date=date)
        except Exception as e:
            return None

    def getFlightsByCustomer(self, customer):
        try:
            return Flights.objects.filter(customer=customer)
        except Exception as e:
            return None
    
    def get_airline_by_username(self, _username):
        try:
            return Airline_Companies.objects.get(user__username=_username)
        except Airline_Companies.DoesNotExist:
            return None

    def get_customer_by_username(self, _username):
        try:
            return Customers.objects.get(user__username=_username)
        except Customers.DoesNotExist:
            return None

    def get_user_by_username(self, _username):
        try:
            return Users.objects.get(username=_username)
        except Users.DoesNotExist:
            return None

    def get_flights_by_parameters(self, _origin_country_id, _destination_country_id, _date):
        try:
            return Flights.objects.filter(
                origin_id=_origin_country_id,
                destination_id=_destination_country_id,
                departure_date=_date
            )
        except Exception as e:
            return None

    def get_flights_by_airline_id(self, _airline_id):
        try:
            return Flights.objects.filter(airline_company_id=_airline_id)
        except Exception as e:
            return None

    def get_arrival_flights(self, _country_id):
        try:
            next_12_hours = timezone.now() + timedelta(hours=12)
            return Flights.objects.filter(
                destination_id=_country_id,
                landing_date__lte=next_12_hours
            )
        except Exception as e:
            return None


    def get_departure_flights(self, _country_id):
        try:
            next_12_hours = timezone.now() + timedelta(hours=12)
            return Flights.objects.filter(
                origin_id=_country_id,
                departure_date__lte=next_12_hours
            )
        except Exception as e:
            return None

    def get_tickets_by_customer(self, _customer_id):
        try:
            return Tickets.objects.filter(customer_id=_customer_id)
        except Exception as e:
            return None
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\tests.py
Contents:
from django.test import TestCase

# Create your tests here.
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\urls.py
Contents:
from . import views
from django.contrib import admin
from django.urls import path
from .views import flight_search
from django.conf.urls.static import static
from django.conf import settings
from django.contrib.auth.views import LoginView
from .views import login_view , home_view , logout_view
from django.conf import settings
from django.conf.urls.static import static







urlpatterns = [
    # path('', views.home, name='home'),
    path('flight_search', views.flight_search, name='flight_search'),
    path('search-flight/', views.search_form, name='search_form'),
    path('search-results/', views.handle_search_form_submission, name='search_results'),
    path('autocomplete/', views.autocomplete, name='autocomplete'),
    path('register/', views.create_new_user, name='create_new_user'),
    path('login/', login_view, name='login'),
    path('', home_view, name='home'),
    path('logout/', logout_view, name='logout'),
    

    

    

]

# urlpatterns += static(settings.MEDIA_URL ,document_root =settings.MEDIA_ROOT)

if settings.DEBUG:  # Only serve media files in debug mode
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\Bingo\views.py
Contents:
# from django.http import HttpResponse, JsonResponse
# from django.shortcuts import render
# from .utils.amadeus import get_ticket_data
# from .models import Airport
# import json
# import datetime
# from django.views.decorators.csrf import csrf_exempt
# from django.db.models import Q


# # def getIATACode(city_name):
# #     try:
# #         airport = Airport.objects.get(name__iexact=city_name)
# #         return airport.iata_code
# #     except Airport.DoesNotExist:
# #         return city_name  # return the original input if no airport is found
# def getIATACode(user_input):
#     try:
#         # try finding by name
#         airport = Airport.objects.get(name__iexact=user_input)
#         return airport.iata_code
#     except Airport.DoesNotExist:
#         try:
#             # if not found by name, try finding by iata_code
#             airport = Airport.objects.get(iata_code__iexact=user_input)
#             return airport.iata_code
#         except Airport.DoesNotExist:
#             # if not found either by name or by iata_code, return the original input
#             return user_input



# def autocomplete(request):
#     q = request.GET.get('q', '')
#     airports = Airport.objects.filter(Q(name__icontains=q) | Q(iata_code__icontains=q))
#     results = [airport.name for airport in airports]
#     return JsonResponse(results, safe=False)


# def search_form(request):
#     if request.method == "POST":
#         num_adults = int(request.POST.get('numAdults', 1))
#         num_children = int(request.POST.get('numChildren', 0))
#         travelers = [{"id": str(i+1), "travelerType": "ADULT"} for i in range(num_adults)]
#         if num_children > 0:
#             travelers.extend([{"id": str(i+1+num_adults), "travelerType": "CHILD"} for i in range(num_children)])

#         cabin_type = request.POST.get('cabinType', 'ECONOMY')

#         data = {
#             "currencyCode": request.POST.get('currencyCode', 'USD'),
#             "originDestinations": [
#                 {
#                     "id": "1",
#                     "originLocationCode": getIATACode(request.POST.get('originLocationCode')),
#                     "destinationLocationCode": getIATACode(request.POST.get('destinationLocationCode')),
#                     "departureDateTimeRange": {
#                         "date": request.POST.get('departureDate1')
#                     }
#                 }
#             ],
#             "travelers": travelers,
#             "sources": ["GDS"],
#             "searchCriteria": {
#                 # "maxFlightOffers": 10, #this number is the max number of results change it to 255 if your don't want restrictions on the number of results
#                 "flightFilters": {
#                     "cabinRestrictions": [
#                         {
#                             "cabin": cabin_type,
#                             "coverage": "MOST_SEGMENTS",
#                             "originDestinationIds": [
#                                 "1"
#                             ]
#                         }
#                     ]
#                 }
#             }
#         }

#         if request.POST.get('flightType') == 'Return':
#             data['originDestinations'].append(
#                 {
#                     "id": "2",
#                     "originLocationCode": getIATACode(request.POST.get('destinationLocationCode')),
#                     "destinationLocationCode": getIATACode(request.POST.get('originLocationCode')),
#                     "departureDateTimeRange": {
#                         "date": request.POST.get('departureDate2')
#                     }
#                 }
#             )

#         response_data = get_ticket_data(data)
#         return JsonResponse(response_data, safe=False)

#     today = datetime.date.today()
#     context = {
#         'today': today.isoformat(),
#     }
#     return render(request, 'Bingo/search_form.html', context)


# @csrf_exempt
# def flight_search(request):
#     if request.method == "POST":
#         json_data = json.loads(request.body)
#         ret_data = get_ticket_data(json_data)
#         return JsonResponse(ret_data, safe=False)


# def home(request):
#     return HttpResponse("Hello, world. You're at the Bingo Airlines home page hello hello.")

    
# def add_user_view(request):
#     user_role = user_roles_dal.get_by_id(1)
#     new_user = users_dal.add(
#         id="112233445",
#         username="testuser",
#         password="testpassword",
#         email="test@example.com",
#         user_role=user_role,
#     )


#     return HttpResponse(f"New user {new_user.username} created with ID {new_user.id}.")



# def show_users(request):
#     users = users_dal.get_all()
#     output = ', '.join([u.username for u in users])
#     return HttpResponse(output)


# def update_user(request,pk):
#     user = users_dal.get_by_id(pk)
#     user = users_dal.update(pk, username="newusername")
#     return HttpResponse(f"User {user.id} updated to {user.username}.")

# from django import forms
# from django.http import JsonResponse, HttpResponseBadRequest, HttpResponse
# from django.shortcuts import render
# from .utils.amadeus import get_ticket_data
# from .models import Airport
# import json
# import datetime
# from django.views.decorators.csrf import csrf_exempt
# from django.db.models import Q

# class SearchForm(forms.Form):
#     numAdults = forms.IntegerField(min_value=1, initial=1 , label='Adults')
#     numChildren = forms.IntegerField(min_value=0, initial=0 , label='Children')
#     cabinType = forms.ChoiceField(choices=[('ECONOMY', 'Economy'), ('BUSINESS', 'Business'), ('FIRST', 'First')] , label='Cabin Type')
#     currencyCode = forms.ChoiceField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP'), ('ILS', 'ILS')] , label='Currency')
#     originLocationCode = forms.CharField(label='Flying From') 
#     destinationLocationCode = forms.CharField(label='Flying To')
#     departureDate1 = forms.DateField(label='Departure Date')
#     flightType = forms.ChoiceField(choices=[('OneWay', 'One Way'), ('Return', 'Return Flight')] , label='Flight Type')
#     departureDate2 = forms.DateField(required=False , label='Return Date')

# def get_iata_code(user_input):
#     try:
#         airport = Airport.objects.get(name__iexact=user_input)
#         return airport.iata_code
#     except Airport.DoesNotExist:
#         try:
#             airport = Airport.objects.get(iata_code__iexact=user_input)
#             return airport.iata_code
#         except Airport.DoesNotExist:
#             return user_input

# def autocomplete(request):
#     q = request.GET.get('q', '')
#     airports = Airport.objects.filter(Q(name__icontains=q) | Q(iata_code__icontains=q))
#     results = [airport.name for airport in airports]
#     return JsonResponse(results, safe=False)

# def search_form(request):
#     if request.method == "POST":
#         return handle_search_form_submission(request)
        
#     today = datetime.date.today()
#     context = {
#         'today': today.isoformat(),
#         'form': SearchForm(),
#     }
#     return render(request, 'Bingo/search_form.html', context)

# def handle_search_form_submission(request):
#     form = SearchForm(request.POST)

#     if form.is_valid():
#         num_adults = form.cleaned_data['numAdults']
#         num_children = form.cleaned_data['numChildren']
#         cabin_type = form.cleaned_data['cabinType']
#         currency_code = form.cleaned_data['currencyCode']
#         origin_code = get_iata_code(form.cleaned_data['originLocationCode'])
#         destination_code = get_iata_code(form.cleaned_data['destinationLocationCode'])
#         departure_date1 = form.cleaned_data['departureDate1']
#         flight_type = form.cleaned_data['flightType']
#         departure_date2 = form.cleaned_data['departureDate2'] if flight_type == 'Return' else None
        
#         travelers = [{"id": str(i+1), "travelerType": "ADULT"} for i in range(num_adults)]
#         if num_children > 0:
#             travelers.extend([{"id": str(i+1+num_adults), "travelerType": "CHILD"} for i in range(num_children)])

#         data = {
#             "currencyCode": currency_code,
#             "originDestinations": [
#                 {
#                     "id": "1",
#                     "originLocationCode": origin_code,
#                     "destinationLocationCode": destination_code,
#                     "departureDateTimeRange": {
#                         "date": departure_date1.isoformat()
#                     }
#                 }
#             ],
#             "travelers": travelers,
#             "sources": ["GDS"],
#             "searchCriteria": {
#                 "flightFilters": {
#                     "cabinRestrictions": [
#                         {
#                             "cabin": cabin_type,
#                             "coverage": "MOST_SEGMENTS",
#                             "originDestinationIds": [
#                                 "1"
#                             ]
#                         }
#                     ]
#                 }
#             }
#         }

#         if flight_type == 'Return':
#             data['originDestinations'].append(
#                 {
#                     "id": "2",
#                     "originLocationCode": destination_code,
#                     "destinationLocationCode": origin_code,
#                     "departureDateTimeRange": {
#                         "date": departure_date2.isoformat()
#                     }
#                 }
#             )
            
#         try:
#             response_data = get_ticket_data(data)
#             return JsonResponse(response_data, safe=False)
#         except Exception as e:
#             return HttpResponseBadRequest('Error processing request')

#     return HttpResponseBadRequest('Invalid form submission')

# @csrf_exempt
# def flight_search(request):
#     if request.method == "POST":
#         try:
#             json_data = json.loads(request.body)
#             ret_data = get_ticket_data(json_data)
#             return JsonResponse(ret_data, safe=False)
#         except Exception as e:
#             return JsonResponse({"error": str(e)}, status=400)

# def home(request):
#     return HttpResponse("Hello, world. You're at the Bingo Airlines home page.")



from django import forms
from django.http import JsonResponse, HttpResponseBadRequest, HttpResponse
from django.shortcuts import render ,redirect
from .utils.amadeus import get_ticket_data
from .models import Airport
import json
import datetime
from django.views.decorators.csrf import csrf_exempt
from django.db.models import Q
from django.core.exceptions import ValidationError
from django.forms.models import model_to_dict
import traceback
import logging
from django.contrib.auth import authenticate, login
from django.contrib.auth.forms import AuthenticationForm , UserCreationForm 
from .facades.facade_base import FacadeBase
from django.core.exceptions import ValidationError
from .forms import UsersForm 
from django.http import HttpResponseRedirect
from django.urls import reverse
from Authentication.models import LoginToken
from Bingo.facades.anonymous_facade import AnonymousFacade
from django.contrib.auth import logout as django_logout
from .models import Users






# logger 
logger = logging.getLogger(__name__)

def home_view(request):
    # Fetch the user using the user_id stored in the session
    user_id = request.session.get('user_id')
    if user_id:
        user = Users.objects.get(id=user_id)
    else:
        user = None

    # Pass the user to the template context
    return render(request, 'home.html', {'user': user})

# def create_new_user(request):
#     facade = FacadeBase()
#     if request.method == "POST":
#         form = UsersForm(request.POST, request.FILES)
#         if form.is_valid():
#             user_data = form.cleaned_data
#             user_data.pop('password_confirm')
#             try:
#                 user = facade.create_new_user(user_data)
#                 return redirect('home')
#             except ValidationError as e:
#                 form.add_error(None, str(e))
#     else:
#         form = UsersForm()
#     return render(request, 'register.html', {'form': form})

def create_new_user(request):
    form = UsersForm(request.POST, request.FILES)
    if request.method == "POST":
        if form.is_valid():
            user = {
                "id": form.cleaned_data.get("id"),
                "username": form.cleaned_data.get("username"),
                "email": form.cleaned_data.get("email"),
                "password": form.cleaned_data.get("password"),
                "user_role": form.cleaned_data.get("user_role"),
                "image": form.cleaned_data.get("image"),
            }

            logger.info(f"Form cleaned data: {form.cleaned_data}")


            try:
                facade = FacadeBase()
                facade.create_new_user(user)
                return HttpResponseRedirect(reverse('login'))
            except ValidationError as e:
                form.add_error(None, e)
            except Exception as e:  # catch any other exceptions
                form.add_error(None, "An unexpected error occurred. Please try again.")
                logger.error(f"Unexpected error creating user: {e}")

        else:
            # Log the form errors when the form is not valid
            logger.error(f"Form errors: {form.errors}")
    else:
        form = UsersForm()
    return render(request, "register.html", {"form": form})

# @csrf_exempt # removed it for now since i want to use csrf token to make sure the request is coming from the same server and avoide csrf attacks
# def login_view(request):
#     if request.method == "POST":
#         username = request.POST['username']
#         password = request.POST['password']
        
#         facade = AnonymousFacade()
#         # result, user_id = facade.login(username, password)
#         login_token, result, user_id = facade.login(username, password)
#         if result is not None:
#             # Save the login_token and user_id in the session or wherever you prefer
#             # request.session['login_token'] = result
#             # request.session['user_id'] = user_id

#             # request.session['login_token'] = result.login_token 
#             request.session['login_token_id'] = login_token.id
#             request.session['user_id'] = user_id

#             return redirect('home')
#             # Redirect the user based on their role
#             # if result.role == 'customer':
#             #     return redirect('customer_dashboard')
#             # elif result.role == 'airline':
#             #     return redirect('airline_dashboard')
#             # elif result.role == 'administrator':
#             #     return redirect('admin_dashboard')
#         else:
#             # Handle login failure
#             return render(request, 'login.html', {'error': 'Invalid credentials'})
#     return render(request, 'login.html')


def login_view(request):
    error_message = None
    if request.method == "POST":
        username = request.POST['username']
        password = request.POST['password']
        
        facade = AnonymousFacade()
        
        try:
            login_token, result, user_id = facade.login(username, password)
            request.session['login_token_id'] = login_token.id
            request.session['user_id'] = user_id
            return redirect('home')
        except ValidationError as e:
            error_message = str(e)
            logger.error(f"Login error: {error_message}")

    return render(request, 'login.html', {'error': error_message})


def logout_view(request):
    # Clear the session
    request.session.flush()
    
    # Call Django's logout function to ensure any other cleanup is done
    django_logout(request)
    
    # Redirect the user to the login page
    return redirect('login')



class SearchForm(forms.Form):
    numAdults = forms.IntegerField(min_value=1, initial=1 , label='Adults')
    numChildren = forms.IntegerField(min_value=0, initial=0 , label='Children')
    cabinType = forms.ChoiceField(choices=[('ECONOMY', 'Economy'), ('BUSINESS', 'Business'), ('FIRST', 'First')] , label='Cabin Type')
    currencyCode = forms.ChoiceField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP'), ('ILS', 'ILS')] , label='Currency')
    originLocationCode = forms.CharField(label='Flying From') 
    destinationLocationCode = forms.CharField(label='Flying To')
    departureDate1 = forms.DateField(label='Departure Date')
    flightType = forms.ChoiceField(choices=[('OneWay', 'One Way'), ('Return', 'Return Flight')] , label='Flight Type')
    departureDate2 = forms.DateField(required=False , label='Return Date')

    def clean(self):
        cleaned_data = super().clean()
        departureDate1 = cleaned_data.get('departureDate1')
        departureDate2 = cleaned_data.get('departureDate2')
        originLocationCode = cleaned_data.get('originLocationCode')
        destinationLocationCode = cleaned_data.get('destinationLocationCode')
        cabinType = cleaned_data.get('cabinType')
        numAdults = cleaned_data.get('numAdults')
        numChildren = cleaned_data.get('numChildren')

        # Check that departure date is not in the past
        if departureDate1 and departureDate1 < datetime.date.today():
            self.add_error('departureDate1', 'Departure date cannot be in the past.')

        # Check that return date is not before the departure date
        if departureDate2 and departureDate1 and departureDate2 < departureDate1:
            self.add_error('departureDate2', 'Return date cannot be before the departure date.')

        # Check that origin and destination are not the same
        if originLocationCode and destinationLocationCode and originLocationCode == destinationLocationCode:
            self.add_error('destinationLocationCode', 'You cannot select the same airport for departure and arrival.')

        # Check cabin type
        if cabinType not in ['ECONOMY', 'BUSINESS', 'FIRST']:
            self.add_error('cabinType', 'Invalid cabin type selected.')


        # Validate number of passengers
        if numAdults and numAdults > 9:
            self.add_error('numAdults', 'You cannot book for more than 9 adults at once.')
        if numChildren and numChildren > 9:
            self.add_error('numChildren', 'You cannot book for more than 9 children at once.')

        return cleaned_data

def get_iata_code(user_input):
    try:
        airport = Airport.objects.get(name__iexact=user_input)
        return airport.iata_code
    except Airport.DoesNotExist:
        try:
            airport = Airport.objects.get(iata_code__iexact=user_input)
            return airport.iata_code
        except Airport.DoesNotExist:
            return user_input

def autocomplete(request):
    q = request.GET.get('q', '')
    airports = Airport.objects.filter(Q(name__icontains=q) | Q(iata_code__icontains=q))
    results = [airport.name for airport in airports]
    return JsonResponse(results, safe=False)

#

def search_form(request):
    if request.method == "POST":
        return handle_search_form_submission(request)
        
    today = datetime.date.today()
    context = {
        'today': today.isoformat(),
        'form': SearchForm(),
    }
    return render(request, 'Bingo/search_form.html', context)

# def handle_search_form_submission(request):
#     form = SearchForm(request.POST)

#     if form.is_valid():
#         num_adults = form.cleaned_data['numAdults']
#         num_children = form.cleaned_data['numChildren']
#         cabin_type = form.cleaned_data['cabinType']
#         currency_code = form.cleaned_data['currencyCode']
#         origin_code = get_iata_code(form.cleaned_data['originLocationCode'])
#         destination_code = get_iata_code(form.cleaned_data['destinationLocationCode'])
#         departure_date1 = form.cleaned_data['departureDate1']
#         flight_type = form.cleaned_data['flightType']
#         departure_date2 = form.cleaned_data['departureDate2'] if flight_type == 'Return' else None
        
#         travelers = [{"id": str(i+1), "travelerType": "ADULT"} for i in range(num_adults)]
#         if num_children > 0:
#             travelers.extend([{"id": str(i+1+num_adults), "travelerType": "CHILD"} for i in range(num_children)])

#         data = {
#             "currencyCode": currency_code,
#             "originDestinations": [
#                 {
#                     "id": "1",
#                     "originLocationCode": origin_code,
#                     "destinationLocationCode": destination_code,
#                     "departureDateTimeRange": {
#                         "date": departure_date1.isoformat()
#                     }
#                 }
#             ],
#             "travelers": travelers,
#             "sources": ["GDS"],
#             "searchCriteria": {
#                 "flightFilters": {
#                     "cabinRestrictions": [
#                         {
#                             "cabin": cabin_type,
#                             "coverage": "MOST_SEGMENTS",
#                             "originDestinationIds": [
#                                 "1"
#                             ]
#                         }
#                     ]
#                 }
#             }
#         }

#         if flight_type == 'Return':
#             data['originDestinations'].append(
#                 {
#                     "id": "2",
#                     "originLocationCode": destination_code,
#                     "destinationLocationCode": origin_code,
#                     "departureDateTimeRange": {
#                         "date": departure_date2.isoformat()
#                     }
#                 }
#             )
            
#         try:
#             response_data = get_ticket_data(data)
#             return JsonResponse(response_data, safe=False)
#         except Exception as e:
#             return HttpResponseBadRequest('Error processing request')

#     return HttpResponseBadRequest('Invalid form submission')

# def handle_search_form_submission(request):
#     form = SearchForm(request.POST)

#     if form.is_valid():
#         num_adults = form.cleaned_data['numAdults']
#         num_children = form.cleaned_data['numChildren']
#         cabin_type = form.cleaned_data['cabinType']
#         currency_code = form.cleaned_data['currencyCode']
#         origin_code = get_iata_code(form.cleaned_data['originLocationCode'])
#         destination_code = get_iata_code(form.cleaned_data['destinationLocationCode'])
#         departure_date1 = form.cleaned_data['departureDate1']
#         flight_type = form.cleaned_data['flightType']
#         departure_date2 = form.cleaned_data['departureDate2'] if flight_type == 'Return' else None
        
#         travelers = [{"id": str(i+1), "travelerType": "ADULT"} for i in range(num_adults)]
#         if num_children > 0:
#             travelers.extend([{"id": str(i+1+num_adults), "travelerType": "CHILD"} for i in range(num_children)])

#         data = {
#             "currencyCode": currency_code,
#             "originDestinations": [
#                 {
#                     "id": "1",
#                     "originLocationCode": origin_code,
#                     "destinationLocationCode": destination_code,
#                     "departureDateTimeRange": {
#                         "date": departure_date1.isoformat()
#                     }
#                 }
#             ],
#             "travelers": travelers,
#             "sources": ["GDS"],
#             "searchCriteria": {
#                 "flightFilters": {
#                     "cabinRestrictions": [
#                         {
#                             "cabin": cabin_type,
#                             "coverage": "MOST_SEGMENTS",
#                             "originDestinationIds": [
#                                 "1"
#                             ]
#                         }
#                     ]
#                 }
#             }
#         }

#         if flight_type == 'Return':
#             data['originDestinations'].append(
#                 {
#                     "id": "2",
#                     "originLocationCode": destination_code,
#                     "destinationLocationCode": origin_code,
#                     "departureDateTimeRange": {
#                         "date": departure_date2.isoformat()
#                     }
#                 }
#             )
            
#         try:
#             response_data = get_ticket_data(data)
#             modified_response = modify_response_data(response_data, currency_code)
#             return JsonResponse(modified_response, safe=False)
#         except Exception as e:
#             return HttpResponseBadRequest('Error processing request')

#     return HttpResponseBadRequest('Invalid form submission')


# def modify_response_data(response_data, currency_code):
#     modified_response = {
#         "meta": {
#             "count": response_data["meta"]["count"]
#         },
#         "data": []
#     }

#     for flight_offer in response_data["data"]:
#         modified_flight_offer = {
#             "type": flight_offer["type"],
#             "id": flight_offer["id"],
#             "lastTicketingDate": flight_offer["lastTicketingDate"],
#             "lastTicketingDateTime": flight_offer["lastTicketingDateTime"],
#             "numberOfBookableSeats": flight_offer["numberOfBookableSeats"],
#             "itineraries": [],
#             "price": {
#                 "currency": currency_code,
#                 "total": flight_offer["price"]["total"],
#                 "grandTotal": flight_offer["price"]["grandTotal"]
#             },
#             "travelerPricings": []
#         }

#         for itinerary in flight_offer["itineraries"]:
#             modified_itinerary = {
#                 "duration": itinerary["duration"],
#                 "segments": []
#             }

#             for segment in itinerary["segments"]:
#                 modified_segment = {
#                     "departure": segment["departure"],
#                     "arrival": segment["arrival"],
#                     "carrierCode": segment["carrierCode"],
#                     "number": segment["number"],
#                     "duration": segment["duration"]
#                 }

#                 modified_itinerary["segments"].append(modified_segment)

#             modified_flight_offer["itineraries"].append(modified_itinerary)

#         for traveler_pricing in flight_offer["travelerPricings"]:
#             modified_traveler_pricing = {
#                 "travelerId": traveler_pricing["travelerId"],
#                 "fareOption": traveler_pricing["fareOption"],
#                 "travelerType": traveler_pricing["travelerType"],
#                 "price": {
#                     "currency": currency_code,
#                     "total": traveler_pricing["price"]["total"]
#                 },
#                 "fareDetailsBySegment": []
#             }

#             for fare_detail in traveler_pricing["fareDetailsBySegment"]:
#                 modified_fare_detail = {
#                     "cabin": fare_detail["cabin"]
#                 }

#                 modified_traveler_pricing["fareDetailsBySegment"].append(modified_fare_detail)

#             modified_flight_offer["travelerPricings"].append(modified_traveler_pricing)

#         modified_response["data"].append(modified_flight_offer)

#     return modified_response



def handle_search_form_submission(request):
    form = SearchForm(request.POST)

    logger.info(f"Form data: {request.POST}")

    if form.is_valid():
    
        logger.info("Form is valid.")
        num_adults = form.cleaned_data['numAdults']
        num_children = form.cleaned_data['numChildren']
        cabin_type = form.cleaned_data['cabinType']
        currency_code = form.cleaned_data['currencyCode']
        origin_code = get_iata_code(form.cleaned_data['originLocationCode'])
        destination_code = get_iata_code(form.cleaned_data['destinationLocationCode'])
        departure_date1 = form.cleaned_data['departureDate1']
        flight_type = form.cleaned_data['flightType']
        departure_date2 = form.cleaned_data['departureDate2'] if flight_type == 'Return' else None
        
        travelers = [{"id": str(i+1), "travelerType": "ADULT"} for i in range(num_adults)]
        if num_children > 0:
            travelers.extend([{"id": str(i+1+num_adults), "travelerType": "CHILD"} for i in range(num_children)])

        data = {
            "currencyCode": currency_code,
            "originDestinations": [
                {
                    "id": "1",
                    "originLocationCode": origin_code,
                    "destinationLocationCode": destination_code,
                    "departureDateTimeRange": {
                        "date": departure_date1.isoformat()
                    }
                }
            ],
            "travelers": travelers,
            "sources": ["GDS"],
            "searchCriteria": {
                "flightFilters": {
                    "cabinRestrictions": [
                        {
                            "cabin": cabin_type,
                            "coverage": "MOST_SEGMENTS",
                            "originDestinationIds": [
                                "1"
                            ]
                        }
                    ]
                }
            }
        }

        if flight_type == 'Return':
            data['originDestinations'].append(
                {
                    "id": "2",
                    "originLocationCode": destination_code,
                    "destinationLocationCode": origin_code,
                    "departureDateTimeRange": {
                        "date": departure_date2.isoformat()
                    }
                }
            )
            
        try:
            response_data = get_ticket_data(data)
            modified_response = {
                "meta": {
                    "count": response_data["meta"]["count"]
                },
                "data": []
            }

            for flight_offer in response_data["data"]:
                modified_flight_offer = {
                    "type": flight_offer["type"],
                    "id": flight_offer["id"],
                    "lastTicketingDate": flight_offer["lastTicketingDate"],
                    "lastTicketingDateTime": flight_offer["lastTicketingDateTime"],
                    "numberOfBookableSeats": flight_offer["numberOfBookableSeats"],
                    "itineraries": [],
                    "price": {
                        "currency": currency_code,
                        "total": flight_offer["price"]["total"],
                        "grandTotal": flight_offer["price"]["grandTotal"]
                    },
                    "travelerPricings": []
                }

                for itinerary in flight_offer["itineraries"]:
                    modified_itinerary = {
                        "duration": itinerary["duration"],
                        "segments": []
                    }

                    for segment in itinerary["segments"]:
                        modified_segment = {
                            "departure": segment["departure"],
                            "arrival": segment["arrival"],
                            "carrierCode": segment["carrierCode"],
                            "number": segment["number"],
                            "duration": segment["duration"]
                        }

                        modified_itinerary["segments"].append(modified_segment)

                    modified_flight_offer["itineraries"].append(modified_itinerary)

                for traveler_pricing in flight_offer["travelerPricings"]:
                    modified_traveler_pricing = {
                        "travelerId": traveler_pricing["travelerId"],
                        "fareOption": traveler_pricing["fareOption"],
                        "travelerType": traveler_pricing["travelerType"],
                        "price": {
                            "currency": currency_code,
                            "total": traveler_pricing["price"]["total"]
                        },
                        "fareDetailsBySegment": []
                    }

                    for fare_detail in traveler_pricing["fareDetailsBySegment"]:
                        modified_fare_detail = {
                            "cabin": fare_detail["cabin"]
                        }

                        modified_traveler_pricing["fareDetailsBySegment"].append(modified_fare_detail)

                    modified_flight_offer["travelerPricings"].append(modified_traveler_pricing)

                modified_response["data"].append(modified_flight_offer)

            # return JsonResponse(modified_response, safe=False) # this is the original line used to Json response TEMP TEMP TEMP 
            return render(request, 'Bingo/search_results.html', {'data': modified_response['data']})
            # return render(request, 'Bingo/search_results.html', {'flights': modified_response['data']})


        except Exception as e:
            traceback.print_exc() # needed if you want to print the the trackback information on an exception
            logger.error(f'Error processing request: {e}')
            return HttpResponseBadRequest('Error processing request')
    else:  
        logger.info("Form is not valid.")
        logger.info(f"Form errors: {form.errors}")

    return HttpResponseBadRequest('Invalid form submission')




@csrf_exempt
def flight_search(request):
    if request.method == "POST":
        try:
            json_data = json.loads(request.body)
            ret_data = get_ticket_data(json_data)
            return JsonResponse(ret_data, safe=False)
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=400)

# def home(request):
#     return HttpResponse("Hello, world. You're at the Bingo Airlines home page.")

-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\__init__.py
Contents:
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\asgi.py
Contents:
"""
ASGI config for BingoAirlines project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BingoAirlines.settings')

application = get_asgi_application()
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\settings.py
Contents:
"""
Django settings for BingoAirlines project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gnd5=4@9_an$)ccgc^ufcd9&v9eapp=4q*kwscd+=ms$pmz6iy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Bingo.apps.BingoConfig',
    'Authentication.apps.AuthenticationConfig',
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BingoAirlines.urls'

LOGIN_REDIRECT_URL = '/'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'Bingo/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BingoAirlines.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'bingo_air_db',
        'HOST': 'localhost',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'SaP#12345',
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/logger.log', 
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
    'loggers': {
        'PIL': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',  # Only log warnings and above for PIL
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jerusalem'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'Bingo/static/')
]

MEDIA_URL = '/Bingo/'
MEDIA_ROOT = os.path.join(BASE_DIR,'Bingo/static/images/')

# MEDIA_ROOT = os.path.join(BASE_DIR ,'static/images/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\urls.py
Contents:
"""
URL configuration for BingoAirlines project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path , include
from django.conf.urls.static import static
from django.conf import settings


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('Bingo.urls')),
]


urlpatterns += static(settings.MEDIA_URL ,document_root =settings.MEDIA_ROOT)
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\BingoAirlines\wsgi.py
Contents:
"""
WSGI config for BingoAirlines project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BingoAirlines.settings')

application = get_wsgi_application()
-----
File: C:\Users\Urb4llZ\Desktop\BingoAir\BingoAirlines\manage.py
Contents:
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BingoAirlines.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
-----
